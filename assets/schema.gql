schema {
	query: Query
}

type Query {
  DogmaAttribute(AttributeID: Int!): DogmaAttribute!
	DogmaAttributes: [DogmaAttributeNode]
	Type(TypeID: Int!): Type!
	Character(CharacterID: Int!): Character!
	Corporation(CorporationID: Int!): Corporation!
	Skills(CharacterID: Int!): CharacterSkills!
	SkillQueue(CharacterID: Int!): [SkillQueueItem]
}

type DogmaAttribute {
  AttributeID: Int
	DefaultValue: Int
	Description: String
	DisplayName: String
	HighIsGood: Boolean
	IconID: Int
	Name: String
	Published: Boolean
	Stackable: Boolean
	UnitID: Int
}

type DogmaAttributeNode {
	AttributeID: Int
	Value: Float
	Attribute: DogmaAttribute
}

type Type {
	TypeID: Int
	Name: String
	Description: String
	Published: Boolean
	GroupID: Int
	Radius: Float
	Volume: Float
	Capacity: Float
	PortionSize: Int
	Mass: Float
	GraphicID: Int
	DogmaAttributes: [DogmaAttributeNode]
}

type Character {
	AllianceID: Int
	AncestryID: Int
	Birthday: String
	BloodlineID: Int
	CorporationID: Int
	Description: String
	Gender: String
	Name: String
	RaceID: Int
	SecurityStatus: Float
	Corporation: Corporation
	Skills: CharacterSkills
	SkillQueue: [SkillQueueItem]
}

type Corporation {
	AllianceID: Int
	CEOID: Int
	Description: String
	Name: String
	CreationDate: String
	CreatorID: Int
	Faction: String
	MemberCount: Int
	TaxRate: Float
	Ticker: String
	URL: String
	CEO: Character
	Creator: Character
}

type CharacterSkill {
	CurrentSkillLevel: Int
	SkillID: Int
	SkillpointsInSkill: Int
	Type: Type
}

type CharacterSkills {
	Skills: [CharacterSkill]
	TotalSP: Int
}

type SkillQueueItem {
	FinishDate: String
	FinishedLevel: Int
	LevelEndSP: Int
	LevelStartSP: Int
	QueuePosition: Int
	SkillID: Int
	StartDate: String
	TrainingStartSP: Int
	Type: Type
}