// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema/alliance.gql
// assets/schema/character.gql
// assets/schema/corporation.gql
// assets/schema/dogma.gql
// assets/schema/killmail.gql
// assets/schema/root.gql
// assets/schema/search.gql
// assets/schema/skills.gql
// assets/schema/solar_system.gql
// assets/schema/structure.gql
// assets/schema/universe.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\xb6\x13\x7f\x9f\x4f\x71\x15\xf0\xaf\x64\x24\xa5\x9c\x3e\xfc\x1b\xd8\x56\x8a\x76\xed\x86\x0c\xd9\xfa\x90\xf6\xc5\x90\x66\x01\x45\x9e\x2c\x26\x34\xe9\x92\x27\xa7\x5e\x91\xef\x3e\xe8\xd1\x92\xe3\xa0\xc5\xb0\xbd\x49\x78\xba\xbb\x1f\xef\xe1\x77\x3c\xcf\x1e\xbc\x7e\xfb\xd3\xc7\x3f\xde\xbd\x81\x9c\x16\xfa\x78\x6f\x56\xff\x03\x98\xe5\xc8\x65\x79\x00\x98\x69\x65\xae\xc1\xa1\x4e\x02\x4f\x6b\x8d\x3e\x47\xa4\x00\x72\x87\x59\x12\xe4\x44\x4b\x3f\x89\x63\x21\xcd\x95\x67\x42\xdb\x42\x66\x9a\x3b\x64\xc2\x2e\x62\x7e\xc5\xbf\xc6\x5a\xa5\x3e\x9e\x3b\xbe\xcc\xd5\x17\x1d\x8f\xd9\x73\x76\xd4\x89\x4c\x78\x1f\x40\xdc\xdc\xe3\x85\x53\x4b\x02\xef\xc4\x0f\xe3\x66\x48\x22\x8f\x0f\xd9\x98\x8d\xeb\x33\x5b\x28\xc3\xae\x7c\x70\x3c\x8b\x6b\xb8\x7f\x8e\xed\x90\x0b\x8a\x0f\x9f\xb1\x27\xec\x71\x2d\xfc\xa7\xe0\x8f\xa4\x5d\xfc\x8b\x17\xdc\x57\xf1\x6d\xf4\x59\xdc\x76\x7a\x96\x5a\xb9\x86\xaa\xc5\x49\x70\xa3\x24\xe5\x13\x38\x1c\x8f\xff\x37\x85\x1c\xd5\x3c\xa7\x56\x5a\x70\x37\x57\x66\x02\xe3\x29\xd8\x15\xba\x4c\xdb\x9b\x09\xe4\x4a\x4a\x34\xd3\xa0\x09\x58\xaa\x15\x28\x99\x04\xed\xb5\x41\x8b\xdb\x83\x5a\xe5\xd3\xe0\xf8\xd4\x72\xa9\xcc\x9c\x31\x36\x8b\xa5\x5a\x0d\xf2\xad\x05\x80\x15\x77\xa0\xed\x7c\x8e\xf2\xc4\x40\x02\x19\xd7\x1e\xa7\x3d\x1d\xd9\x6b\x2c\x15\x41\x30\xdd\xeb\x7d\x5e\x70\x12\x39\x24\x70\xa3\x8c\xb4\x37\x4c\x5b\xc1\x49\x59\xc3\x72\xee\x73\x56\x29\xa3\x98\x0b\x81\xde\x5f\x56\x08\x49\x74\xfe\xe7\x67\xff\xf9\xe1\xc5\xfe\x28\x1e\x35\x38\x2a\x83\xa8\x32\x1d\xc1\xb7\xe6\x13\xf4\x63\x21\x57\x74\xa1\x40\x17\x48\xe5\x71\x7e\x78\xd1\x6a\x6e\xdb\xb0\xb2\xc2\x88\x32\x06\x48\x0b\xa5\xe5\xcb\x82\xf2\x4f\x1f\x4e\xa3\x3e\x76\x19\xb8\xd0\x0a\x0d\x9d\xc8\x32\xa5\x4c\xe2\x38\x15\x47\xf2\x29\x3e\xff\xff\xd3\xe7\x69\x96\x66\x98\x1e\xf1\x27\xe9\x18\xd3\x67\xe2\x28\x7d\x1c\x4c\x07\xae\x0e\xa5\x72\x28\xe8\xd3\x87\xd3\x1d\x99\x5b\xa7\xe6\xca\x0c\x3d\x84\x58\xd6\xc6\x1d\xb1\xb4\x9d\x2b\xc3\x70\x85\xd6\x68\x65\x6a\x5e\x59\x5e\x50\x1e\x97\x7f\xac\x53\x7f\xe1\x0b\x87\x7e\x69\x8d\xc7\x4b\x5a\x2f\x31\xa9\xf2\x7e\xe8\x90\xeb\x45\xf2\xe6\xec\xa4\x17\x53\x83\xbe\x9f\x40\xf0\xb0\x8d\xed\xb2\x70\x2a\x09\x60\xbf\x1f\xec\x6e\x8f\xba\x10\x97\x25\x91\x60\xbf\x2b\xcb\x6e\x5b\x2f\xec\x12\x2b\xbb\xaa\xb6\x67\xa5\x18\x8d\x3a\x42\x00\x38\xa4\xc2\x99\xc6\xe7\x3b\x9d\x69\xbc\xb7\xfa\x52\x5d\xe1\x21\x81\xf3\xee\x33\x40\x88\x5e\x3d\xf2\xd7\x4a\x6b\xcf\x1c\x72\x79\xd9\x9c\x57\x87\xe1\xc1\x77\xcd\xbe\x14\x58\xe0\x4e\xd3\xc2\xa8\x15\x3a\x8f\x8d\x31\xb9\x42\x50\xe1\x70\x37\x6e\x09\xb5\xe0\xaa\x85\xde\x88\xab\xc3\xb0\xb3\xbd\xb8\x5b\x8b\x3a\x21\x76\x65\x95\x89\x42\x08\x47\xf7\x57\xa5\x9a\xe3\xf7\xa7\x3f\x97\x4f\x2c\xba\xa8\x11\xdf\x71\xc7\x17\xbe\x5f\xa6\x81\x82\xad\xb8\x53\x3c\xd5\x55\xcd\xee\xd3\xbc\x80\x5f\xcf\xde\xfe\xce\x96\xdc\x79\x8c\xee\x31\x1a\xc1\x04\x4c\xa1\xf5\x90\xb9\xe5\xbb\x85\xae\xc4\xfe\x76\xbb\xd1\x94\x13\xdb\x0e\x68\x3f\x32\x68\xed\xcf\x83\x97\x0d\x8d\xab\xa1\x08\x2e\x4a\xee\xbf\x42\xee\xd0\x41\x49\x9f\x8a\xcc\x1b\xbc\xdb\x3b\x55\xab\xf6\x4c\x14\xc4\x5f\x0a\x74\xeb\xe0\x60\x70\xc7\x02\x29\xb7\x72\x02\xc1\xd2\x7a\x0a\xfa\x8d\x2a\x1f\xd7\x49\x9d\xab\x27\xa7\xcc\x5c\x65\xeb\xad\x3a\xf6\xcd\x85\x43\x89\x86\x14\xd7\x7e\x02\x81\x32\x42\x17\x12\x07\x80\x4d\x3a\x93\xf6\xb0\xd1\xdd\x8e\x18\xe5\x68\xa2\xae\x7b\x51\x3b\xae\xc3\x82\x34\xf9\xb4\x4a\x46\xf8\x95\xa2\xd1\xf4\x07\x70\x5e\x59\xb9\x1e\x62\x91\x5b\x0f\xe4\x0e\xbd\xd7\xdd\x81\xf7\xb4\x67\x7c\x0b\xa2\x7a\xab\x23\x74\xce\xba\xd1\x6e\xa0\xbe\xf7\xc0\xb9\x17\xef\x1d\x02\x7f\x28\x37\xeb\xeb\xb7\xbf\x31\x87\x46\xa2\x8b\x3a\xdb\x4a\xc1\x84\x43\x4e\xf8\x46\xe3\x02\x0d\x45\xbf\x54\xcb\xea\xfd\xe9\x01\x7c\xcb\x6a\xa2\x4f\xb6\x88\x7f\xdb\xeb\x91\xb4\xa2\x28\xdd\xd8\x1c\xa9\x41\x78\xb5\x3e\x91\xd1\x66\xe7\xb5\x4b\x64\xf3\x0a\x35\x0f\xb2\x47\xfa\xa8\x16\x68\x0b\xea\x6a\x3b\x78\x6c\x4a\x0e\x3f\xd8\x4d\xe2\x92\xf8\x1c\x92\xcd\xed\xc3\x14\x42\x1e\x0e\x2a\xcb\x99\xd0\xdc\xfb\x53\xe5\x89\x71\x29\xa3\x90\xac\xd5\x29\x77\x8f\xd2\x82\xc8\x9a\x70\x34\xb0\x55\xc6\xa0\xfb\x88\x5f\x09\x12\x08\xdb\x29\xc1\x70\xaf\x67\xd4\xdd\x5b\xb1\xff\x0c\x35\x0a\xb2\x2e\x0a\xf9\x39\x29\x2a\x17\xfc\x3b\x87\x44\x2a\x5b\xc3\xfb\x6a\x3c\x2e\xc2\x11\x53\xc6\xa3\xa3\x97\xf2\x8a\x0b\x34\xb4\x09\x35\x23\x2c\xdb\x12\x1e\x00\xdf\x0a\xda\x1a\xa1\x95\xb8\x2e\x97\xfd\xae\xfa\xf4\x4a\xd9\xee\x36\x48\xb6\x76\xea\x3d\x14\x69\x09\x72\x00\xe3\x3a\xf7\xe1\x6f\xa1\x72\x4a\x8f\xf7\x66\x71\xfd\x33\xf8\xef\x00\x00\x00\xff\xff\xe9\x95\x64\x08\x1e\x0b\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2846, mode: os.FileMode(420), modTime: time.Unix(1495654047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaAllianceGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xcd\xaa\xc2\x40\x0c\x46\xd7\x93\xa7\x98\xe7\x98\xdd\xe5\x56\xa1\xa0\x6e\xea\x4e\x5c\x8c\xd3\x50\x06\xa7\x49\x49\x53\x50\xa4\xef\x2e\x6d\xb1\x3f\xba\xcc\x21\x9c\xef\xe8\xb3\x41\xfb\x97\x52\xf4\x14\xd0\xbe\xc0\x9c\x7c\x8d\xce\x16\x2a\x91\x2a\x30\x99\x57\xdc\x73\x47\x25\x96\x0b\xdc\x3d\x30\x74\xca\x92\x67\xce\xe6\xa4\x60\xce\x31\xdc\x51\x7e\x1f\x9c\xfd\x67\x69\x58\xbc\x46\x26\x30\x47\xac\x6f\x28\xad\xb3\x97\xcf\xe0\x44\xae\x60\xf2\xc0\xd4\xba\x39\x64\x3c\xa1\x07\xd8\xe4\x4d\xdf\x43\xe4\x4a\x3b\x47\xac\xd8\x76\xf7\x5b\x33\xca\x07\xcb\xc1\x4b\x35\x5e\x4b\x79\x51\xfb\x94\x36\xa8\x87\x77\x00\x00\x00\xff\xff\x93\x67\x43\x87\x23\x01\x00\x00")

func assetsSchemaAllianceGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaAllianceGql,
		"assets/schema/alliance.gql",
	)
}

func assetsSchemaAllianceGql() (*asset, error) {
	bytes, err := assetsSchemaAllianceGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/alliance.gql", size: 291, mode: os.FileMode(420), modTime: time.Unix(1495661019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaCharacterGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x4f\xc3\x30\x0c\xc5\xcf\xf1\xa7\xf0\x6e\xf0\x15\x72\xdb\x1f\x81\x2a\xd0\x04\x74\xb7\x69\x87\x28\x35\x2c\xc2\x4b\x2a\xc7\x45\xaa\xd0\xbe\x3b\x6a\xb6\xae\xdd\x81\x4b\xd5\xdf\x7b\xf2\x73\xfc\xb4\x6f\x09\xd7\x47\x27\xce\x2b\x09\xfe\x82\x59\x32\x07\x17\x3d\x55\x1b\x8b\x55\x54\x30\xcb\xe8\x29\xab\xf4\x37\x61\x15\x44\x8f\x8d\xeb\x2d\xd6\x2a\x21\x7e\x2d\xc0\xac\x38\xa5\x86\x43\x1c\xa7\x16\x60\xd6\x49\xda\x24\x4e\x43\x8a\x93\xb8\xa1\xec\x25\xb4\x83\x38\x4e\x83\x79\xa6\xd8\x90\xcc\xd2\xb6\xee\x44\x33\xfc\x70\x7e\x96\x5b\x93\xef\x24\x68\x5f\xab\xd3\x2e\x5b\x7c\xe2\xe4\xf4\x6e\x9d\xc5\x19\x4c\x07\x59\x1c\xff\xc0\xd4\xdf\x81\x39\xdb\xe9\xf2\x8b\x70\x35\xde\x3b\xea\xc8\xe2\x7e\x82\x4a\xe9\x74\x00\xc4\x97\xc0\x7c\x72\x81\xf3\xc3\x8a\x3e\x93\x50\x79\xd4\xa3\xc5\xfd\x68\x6c\x53\x43\x07\x38\x03\xdc\x17\x5b\x92\x86\x76\xd7\x9d\x08\x45\x2d\xfc\x4a\x3f\xc4\xd7\x4e\x8b\x70\x6b\xb8\x50\x9b\x42\xd4\x5c\xc5\x02\x57\x63\xd7\xb7\x64\x71\xf8\xfe\xb3\x23\x0f\x4b\xc6\xeb\xf6\xf7\xde\x01\xcc\x2e\xa9\xe3\xfa\xed\x92\x76\x86\xbf\x00\x00\x00\xff\xff\x40\xf4\x17\x77\xfe\x01\x00\x00")

func assetsSchemaCharacterGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaCharacterGql,
		"assets/schema/character.gql",
	)
}

func assetsSchemaCharacterGql() (*asset, error) {
	bytes, err := assetsSchemaCharacterGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/character.gql", size: 510, mode: os.FileMode(420), modTime: time.Unix(1495752400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaCorporationGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x51\xca\xc2\x30\x10\x84\x9f\x9b\x53\xec\x39\xf2\xf6\x93\xb6\x50\xf8\xb5\x50\xf5\x00\x6b\x58\x34\xd8\x66\xc3\xba\x82\x22\xde\x5d\x5a\x6c\x6a\x7d\x9b\x19\x66\xbf\x65\xf4\x91\x08\x1c\x4b\x62\x41\x0d\x1c\xe1\x69\x8a\xbf\xbe\x0f\x18\x3d\x35\xa5\x85\x26\xaa\x29\x5c\xd5\x66\x5d\xd2\xd5\x4b\x48\x63\xd7\xc2\x4e\x25\xc4\x93\x29\xb6\x38\xd0\xe2\x9c\xd0\xc4\x2a\x51\x7f\x53\x96\x0c\xaa\xd1\xaf\x21\x1b\x1a\x8e\x24\x8e\x6f\x51\x3f\x95\x3d\xde\xbb\x89\x51\xf7\x8c\xa3\x0f\xfe\x42\xb2\x5c\x1c\xba\xff\x2f\x7e\xd5\x5a\x70\x67\x14\xf4\x4a\x92\xff\xad\xb2\x79\x99\x85\x59\x99\x97\x79\x07\x00\x00\xff\xff\xb5\x88\xad\x7c\x03\x01\x00\x00")

func assetsSchemaCorporationGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaCorporationGql,
		"assets/schema/corporation.gql",
	)
}

func assetsSchemaCorporationGql() (*asset, error) {
	bytes, err := assetsSchemaCorporationGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/corporation.gql", size: 259, mode: os.FileMode(420), modTime: time.Unix(1495661002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaDogmaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4e\x86\x40\x0c\x85\xd7\xd3\x53\xf4\x1c\xb3\xd3\x4c\xd4\xd9\x10\x13\xa2\xfb\x02\x15\x1a\x87\x29\x61\x3a\x0b\x62\xb8\xbb\xd1\x44\x04\xfd\x97\xfd\xfa\xf2\x5e\x3e\xdb\x16\xc6\xa0\xe3\x4c\x77\x66\xab\x74\xd5\x18\x3f\x00\xf1\xb8\x62\xf0\x18\xb3\x81\x0b\xfc\x46\x35\xd9\x2b\xa5\xca\x1e\x1f\x92\xd2\x37\x2c\xfd\x2a\x8b\x89\x66\x8f\xad\xad\x92\x47\x70\x41\xca\x92\x68\x6b\x68\xe6\x5f\xf8\x24\xe3\x14\xcb\xa3\xea\xe0\xf1\x5e\x35\x31\x65\x70\xb1\xd7\x7c\x0c\x5c\xf3\xcf\xb5\x4b\x52\x26\x3e\xc7\x5b\xa3\xfe\x9d\xba\xc4\x27\xf6\x92\xc5\x7e\x2a\x76\x80\x1b\x3e\x8d\x0e\x5f\x4e\xee\xbf\xd2\xd5\xe5\xf8\xfb\x3f\x05\xb0\xc3\x67\x00\x00\x00\xff\xff\x0f\xc6\xc1\x4d\x27\x01\x00\x00")

func assetsSchemaDogmaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaDogmaGql,
		"assets/schema/dogma.gql",
	)
}

func assetsSchemaDogmaGql() (*asset, error) {
	bytes, err := assetsSchemaDogmaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/dogma.gql", size: 295, mode: os.FileMode(420), modTime: time.Unix(1495726102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaKillmailGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4f\x6b\xeb\x30\x0c\xbf\xe7\x53\xe8\x7d\x0d\xdf\x5e\x5f\x08\xaf\x8c\x8d\x0d\x97\xf5\x30\x76\x10\xa9\x48\x45\x1d\xcb\x38\x2a\x23\x8c\x7d\xf7\xe1\x76\x4e\x9c\xad\xdd\x61\xec\x12\xe4\x9f\x25\xfd\xfe\xc4\x3a\x06\x82\x1b\x76\xae\x47\x76\x77\xb2\x23\x78\xad\x60\x02\xd6\xb5\x81\xb5\xd7\x3f\x05\xf4\x1f\x87\xbd\x01\xab\x91\x7d\x57\xe2\x66\xaa\xaa\xb7\xaa\x5a\xac\x3d\xad\xfc\xab\x8a\xed\x81\xe2\x60\xe0\x29\x5f\x64\xec\xf9\x7b\xca\x0d\xf7\x54\x52\xde\x8a\xf8\x8f\xb6\x0a\xc0\x8a\xc3\x68\xc7\x41\xa9\x2f\x66\x1f\xb9\x55\xee\x67\x51\xe7\x73\x05\xb0\xc5\x98\x67\x3f\xeb\x3c\xf7\x9c\xd5\x3a\xc7\xe8\x5b\x9a\x69\xfe\xed\x31\x62\xab\x14\x0b\x48\x62\x90\x88\xca\xa5\x9c\x1a\x7b\xec\x68\x83\x07\xf2\x19\x6a\xb0\x5d\xf6\xdc\xcb\xc0\x09\x31\x53\x55\x01\xac\x95\xfa\x32\x9c\x74\x4e\xc1\xd8\x3d\x87\xcd\x18\x2e\x49\x31\x73\x59\x34\x1a\x48\xdf\x2f\xee\x72\xd8\xbf\xe2\xaf\x16\x4f\x57\xed\x35\xec\xd1\xad\x9c\xbc\x18\x58\x89\x38\xc2\x64\xcf\x52\x7b\x8c\xac\xa3\x55\xd4\xe3\x60\xa0\x71\x82\x7a\xd1\xde\x96\x30\x88\xff\x89\xe5\x72\xf6\x4a\x0a\x29\xd5\x53\x02\x8d\xc3\x2e\x6f\x4f\xe0\x92\xef\xda\xcf\x78\x38\xa2\x57\xd6\xb1\xa6\x41\xa3\x8c\xb4\xcb\x03\xd3\x45\x94\x10\x66\xd8\xb2\xef\x1c\xa9\x4c\x6f\x61\x21\xed\x3d\x00\x00\xff\xff\xd7\x9c\xb7\xdc\x7d\x03\x00\x00")

func assetsSchemaKillmailGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaKillmailGql,
		"assets/schema/killmail.gql",
	)
}

func assetsSchemaKillmailGql() (*asset, error) {
	bytes, err := assetsSchemaKillmailGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/killmail.gql", size: 893, mode: os.FileMode(420), modTime: time.Unix(1495665558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaRootGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xda\xa7\x90\x6e\xfa\x21\x4f\xe0\x5b\xf8\x43\x69\x08\x14\x52\xf7\x16\x7c\x50\x9d\x25\x16\x95\x2d\x57\x5a\x51\x4c\xc8\xbb\x17\x45\x48\x56\x4a\xe9\xc5\x9a\x9d\xf9\x34\xac\xe5\xfb\x01\x47\xc5\xaf\xc0\x3e\x03\xba\xa5\xe1\xc7\x78\xc0\x0d\x80\x96\x19\xd3\xc4\xaf\xc0\xf9\xce\x5e\x46\xb5\x25\x72\xfa\x3d\x10\xca\xa2\xf6\xbb\x86\xef\x27\x12\xff\x9a\x1f\x88\x00\xf6\x68\xf8\x86\x9f\x1e\x9d\x17\x7b\xc6\x0e\xd8\xdb\x32\xa3\x8c\x9f\xaa\x2b\x8e\x02\xd8\xff\x41\x39\xd5\x13\x3a\x59\x54\x05\x15\x2f\x92\xd6\xcd\xd6\x29\xd2\x76\x92\x95\xae\xe9\xd5\x15\xc0\xda\x0f\x6d\x8c\xff\xbb\x36\x31\x19\x3e\x06\x0c\xf8\xeb\x85\xd3\x9a\xef\x09\xc7\x0e\xd8\xd6\x18\xad\xa6\x1e\x65\x16\x15\x9d\xad\xd8\x8b\xca\xf5\x83\x4c\x47\xfc\xe5\xf8\x46\xeb\xd4\x89\x0d\x3f\xe0\xf2\x65\xdd\xb9\xe1\x2d\x39\x3d\x5d\x62\x41\x02\x5e\xd1\x07\x43\x5e\x00\x8f\x51\xe8\x29\xb8\x74\x3d\x0f\xe9\x75\xab\x54\x16\x15\xb7\x79\x32\x56\xdd\xf7\x29\xee\xbd\xca\x1a\xe5\xda\xc5\x13\x8e\x32\x1d\xd5\xe6\x55\x18\xd9\x83\x36\x66\x54\xda\xc8\x2c\x32\xba\x29\xd1\xb3\xf2\x43\xbd\x7a\xf6\x05\xdc\xe0\x3b\x00\x00\xff\xff\x06\xd6\xec\x09\x7b\x02\x00\x00")

func assetsSchemaRootGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaRootGql,
		"assets/schema/root.gql",
	)
}

func assetsSchemaRootGql() (*asset, error) {
	bytes, err := assetsSchemaRootGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/root.gql", size: 635, mode: os.FileMode(420), modTime: time.Unix(1495665451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSearchGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x51\xca\xea\x30\x10\x85\x9f\x9b\x55\x64\x01\xff\x0a\xfa\x16\x7a\xa3\x16\x6a\x23\x49\x50\xe4\xe2\x43\x28\x41\x85\x98\x48\x1a\x2f\x14\x71\xef\x97\xa9\x76\xd2\xfa\xbf\x94\x39\x67\xe6\x3b\x1d\x32\x69\xb8\x5b\xaa\xac\x89\xdd\x45\xda\xfe\xe1\x52\x4f\x9f\xa4\x60\x67\xeb\x53\x5f\xd2\xbf\xb5\x4f\x27\x52\x30\xe7\xae\xc6\x77\x16\x9c\xa9\x7e\x4f\x9f\x48\x51\x5d\x4c\x34\x5d\xb2\x11\xba\x28\x72\x3b\xf8\x3e\x59\xe7\x4c\xba\x06\x9f\x23\xab\x10\xef\x21\xa2\x39\x93\x48\xae\x4c\xb7\x64\x6a\xff\xcf\xfa\x14\xe2\xa0\x87\xfb\xb8\x0b\xdf\x73\x28\x91\x90\xf6\xbc\x00\x54\x70\x26\xaa\xa1\x4f\xf6\x06\xe6\x4c\x22\xa2\xd2\xd7\x62\x87\x10\x6f\x97\xe0\x2c\x3a\x2f\x42\xac\x7f\xdc\x3e\x8f\x04\xff\x1b\x5f\x68\xcd\x5b\xfd\x43\x0a\xd6\x34\x35\x6b\x2b\xfe\x43\x8a\x6a\xc3\x24\xab\x34\x97\x50\x8b\x56\x69\xde\x34\x4c\xd7\xa2\x1d\xb5\xdc\x09\x39\xa9\x15\xab\x3e\x55\xdd\xee\x79\xab\x85\x3c\xea\xe3\x0e\x32\x24\x5f\xbf\x1b\x4a\x34\x4c\xaa\xa3\xd2\x7c\x0b\x4a\x4f\xe8\x41\xc8\xed\x46\x34\x1c\xd6\x1a\x6f\xb7\xbc\xc7\xb8\xda\xc7\xa9\xff\x94\xb4\xf6\x29\x1b\x25\x0e\x23\xfd\x75\x2f\xc0\xd1\x42\x1e\x9d\x32\xcf\xe7\x84\xef\xcb\x8d\x19\xd9\xcc\x29\xd9\x2b\xe7\x14\x26\x2d\xae\x09\x29\xa0\x10\x07\x51\x52\xf8\x22\xf0\xeb\x9e\xf4\x49\x28\x7d\x1b\x13\x37\xe9\x72\x3e\x4d\x5e\xe4\x7f\x00\x00\x00\xff\xff\xe8\xde\xfa\x48\xf8\x02\x00\x00")

func assetsSchemaSearchGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSearchGql,
		"assets/schema/search.gql",
	)
}

func assetsSchemaSearchGql() (*asset, error) {
	bytes, err := assetsSchemaSearchGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/search.gql", size: 760, mode: os.FileMode(420), modTime: time.Unix(1495661052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSkillsGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\xce\xce\xcc\xc9\x09\x2c\x4d\x2d\x4d\xf5\x2c\x49\xcd\x55\xa8\xe6\xe2\x74\xcb\xcc\xcb\x2c\xce\x70\x49\x2c\x49\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x87\x89\xa5\xa6\xf8\xa4\x96\xa5\xe6\x58\x29\x78\xe6\x95\x70\x71\x82\xd9\xae\x79\x29\xc1\x01\xc8\x02\xc1\x25\x89\x45\x25\x70\x21\xb0\xc1\x01\xf9\xc5\x99\x25\x99\xf9\x79\x50\x31\xb0\x8d\x9e\x2e\x30\x1e\x48\x3d\xaa\x65\x21\x45\x89\x99\x79\x99\x79\xe9\xa8\x46\x85\x54\x16\xa4\x5a\x29\x80\x48\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x64\xc5\x38\xa8\xbb\x00\x00\x00")

func assetsSchemaSkillsGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSkillsGql,
		"assets/schema/skills.gql",
	)
}

func assetsSchemaSkillsGql() (*asset, error) {
	bytes, err := assetsSchemaSkillsGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/skills.gql", size: 187, mode: os.FileMode(420), modTime: time.Unix(1495660976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSolar_systemGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x4f\xbb\x8a\xc3\x30\x10\xec\xf5\x15\xf3\x1d\x6a\x7d\x1c\xb8\xb8\xe3\x40\xe5\xe1\x62\x09\x8b\x11\xc8\xda\xa0\x5d\x17\x26\xe4\xdf\x83\x2c\x64\x9b\x90\x4e\x33\x9a\xd7\xda\x76\x67\x04\x49\x54\xc2\xa6\xc6\x0b\x1e\x0e\xf8\xa5\x85\x3d\x82\x95\x98\x67\x07\x0c\x92\xd5\x38\x25\xb2\x28\x79\xfc\xf2\x18\xb3\x39\xe0\x2f\x51\x66\x53\x8f\xff\x66\x6d\x78\xaa\x3f\xa2\xb1\x6a\xfd\xf1\x72\x40\xe0\xdb\x5a\xa2\x6d\x43\x22\xd5\x4b\x7a\xe7\x83\x91\xad\xea\xf1\x9d\x84\x6a\x7c\x30\x2a\x33\x19\x9f\x05\x9d\xa9\x15\x8d\xe9\x63\x9e\xce\xb5\x43\x2e\x43\xf6\x4b\x7e\x44\x72\x0d\x68\x54\x45\xd3\xb1\xfc\xb3\xb9\x97\xec\xf6\x0e\xde\xa5\x67\xdc\xd1\x72\x4a\x5e\x01\x00\x00\xff\xff\x5f\xf2\xd2\xf4\x53\x01\x00\x00")

func assetsSchemaSolar_systemGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSolar_systemGql,
		"assets/schema/solar_system.gql",
	)
}

func assetsSchemaSolar_systemGql() (*asset, error) {
	bytes, err := assetsSchemaSolar_systemGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/solar_system.gql", size: 339, mode: os.FileMode(420), modTime: time.Unix(1495661081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaStructureGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x29\x2a\x4d\x2e\x29\x2d\x4a\x55\xa8\xe6\x52\x50\xf0\x4b\xcc\x4d\xb5\x02\x89\x65\xe6\xa5\x73\x29\x28\x04\xe7\xe7\x24\x16\x05\x57\x16\x97\xa4\xe6\x7a\xba\x58\x29\x78\xe6\x95\x70\x29\x28\x84\x54\x16\xa4\x22\x78\x01\xf9\xc5\x99\x25\x99\xf9\x79\x56\x70\x16\x57\x2d\x17\x17\xaa\xd1\x7e\xf9\x29\x10\xe3\xe1\x22\x20\xfd\x6e\x39\xf9\x89\x25\xc8\x82\x56\x08\x26\x57\x2d\x17\x20\x00\x00\xff\xff\x41\xce\xce\x4f\x9e\x00\x00\x00")

func assetsSchemaStructureGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaStructureGql,
		"assets/schema/structure.gql",
	)
}

func assetsSchemaStructureGql() (*asset, error) {
	bytes, err := assetsSchemaStructureGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/structure.gql", size: 158, mode: os.FileMode(420), modTime: time.Unix(1495661098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaUniverseGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4b\x6a\x03\x31\x0c\x86\xd7\xd6\x29\x74\x0e\xef\xda\x0e\x0d\x59\x34\x0c\x4d\x29\x7d\xd0\x85\x32\x23\x12\x81\x63\x19\x5b\x5e\xa4\x21\x77\x2f\x2e\xf3\x20\x1b\xe9\xd7\x07\xfa\x84\xec\x92\x18\xdf\x5a\xb9\x82\x6b\x7d\xdb\x79\xdc\x46\x03\xb7\xa3\x33\x7b\xdc\x5b\x96\x78\x04\xd7\x71\x19\xb2\x24\x13\x8d\x2b\xec\xeb\x21\x48\x39\xf1\xe8\xf1\x51\x35\x30\x45\x70\x9b\xac\x35\x2d\x92\x57\x1a\xa5\x16\x8f\xcf\x41\xc9\xc0\xbd\x6b\xa8\xcd\x3a\x8d\x4f\x94\x68\x10\xbb\x2c\xa0\xd7\xdc\x2e\xec\xe5\x97\x27\xc1\x0b\x95\x75\x7d\x93\x29\x9d\x64\x58\xec\x9d\x1e\xcf\xf4\x60\x96\xe5\x50\x8d\x8b\xc7\xef\x7b\xb2\xd3\x91\x7f\xe0\x06\xf0\xff\x65\xaf\x45\x9a\x1d\xaf\x80\xf8\x31\x4b\x11\x3f\xd7\xf8\x35\xc7\x1b\xfc\x05\x00\x00\xff\xff\x3a\x1e\xc6\x70\x19\x01\x00\x00")

func assetsSchemaUniverseGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaUniverseGql,
		"assets/schema/universe.gql",
	)
}

func assetsSchemaUniverseGql() (*asset, error) {
	bytes, err := assetsSchemaUniverseGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/universe.gql", size: 281, mode: os.FileMode(420), modTime: time.Unix(1495660921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema/alliance.gql": assetsSchemaAllianceGql,
	"assets/schema/character.gql": assetsSchemaCharacterGql,
	"assets/schema/corporation.gql": assetsSchemaCorporationGql,
	"assets/schema/dogma.gql": assetsSchemaDogmaGql,
	"assets/schema/killmail.gql": assetsSchemaKillmailGql,
	"assets/schema/root.gql": assetsSchemaRootGql,
	"assets/schema/search.gql": assetsSchemaSearchGql,
	"assets/schema/skills.gql": assetsSchemaSkillsGql,
	"assets/schema/solar_system.gql": assetsSchemaSolar_systemGql,
	"assets/schema/structure.gql": assetsSchemaStructureGql,
	"assets/schema/universe.gql": assetsSchemaUniverseGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema": &bintree{nil, map[string]*bintree{
			"alliance.gql": &bintree{assetsSchemaAllianceGql, map[string]*bintree{}},
			"character.gql": &bintree{assetsSchemaCharacterGql, map[string]*bintree{}},
			"corporation.gql": &bintree{assetsSchemaCorporationGql, map[string]*bintree{}},
			"dogma.gql": &bintree{assetsSchemaDogmaGql, map[string]*bintree{}},
			"killmail.gql": &bintree{assetsSchemaKillmailGql, map[string]*bintree{}},
			"root.gql": &bintree{assetsSchemaRootGql, map[string]*bintree{}},
			"search.gql": &bintree{assetsSchemaSearchGql, map[string]*bintree{}},
			"skills.gql": &bintree{assetsSchemaSkillsGql, map[string]*bintree{}},
			"solar_system.gql": &bintree{assetsSchemaSolar_systemGql, map[string]*bintree{}},
			"structure.gql": &bintree{assetsSchemaStructureGql, map[string]*bintree{}},
			"universe.gql": &bintree{assetsSchemaUniverseGql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

