// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema/alliance.gql
// assets/schema/character.gql
// assets/schema/corporation.gql
// assets/schema/dogma.gql
// assets/schema/killmail.gql
// assets/schema/root.gql
// assets/schema/search.gql
// assets/schema/skills.gql
// assets/schema/solar_system.gql
// assets/schema/structure.gql
// assets/schema/universe.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\xb6\x13\x7f\x5f\xa0\xdf\xe1\x2a\xe0\x5f\xc9\x48\x4a\x39\x7d\xf8\x37\xb0\xad\x16\xed\xda\x0d\x19\xb2\xf5\x21\xed\x8b\x21\xcd\x02\x8a\x3c\x59\x4c\x68\xd2\x25\x4f\x4e\xbd\x22\xdf\x7d\xa0\x2c\xd9\x92\x67\xaf\x05\xb6\xbd\xb1\x49\xdd\xdd\x8f\x77\xbf\xbb\xe3\x71\x72\xef\xd5\x9b\x1f\x3e\xfc\xf6\xf6\x35\x94\x34\xd3\xcf\xee\xde\x99\x34\xff\x00\x93\x12\xb9\xac\x57\x00\x13\xad\xcc\x35\x38\xd4\x59\xe4\x69\xa9\xd1\x97\x88\x14\x41\xe9\xb0\xc8\xa2\x92\x68\xee\x47\x69\x2a\xa4\xb9\xf2\x4c\x68\x5b\xc9\x42\x73\x87\x4c\xd8\x59\xca\xaf\xf8\x97\x54\xab\xdc\xa7\x53\xc7\xe7\xa5\xfa\xac\xd3\x21\x7b\xca\x8e\xd7\x5b\x26\xbc\x8f\x20\x6d\x0f\xf2\xc2\xa9\x39\x81\x77\xe2\xbb\x81\x0b\x24\x51\xa6\x47\x6c\xc8\x86\xab\x35\x9b\x29\xc3\xae\x7c\xf4\x6c\x92\xae\xe0\xfe\x01\xb8\x43\x2e\x28\x3d\x7a\xc2\x1e\xb1\x87\xab\xcd\x7f\x8b\xfe\x40\xda\xd9\xbf\x79\xc2\x3e\xd6\xff\x02\x3f\x49\xd7\xf9\x9e\xe4\x56\x2e\xa1\x4e\x74\x16\xdd\x28\x49\xe5\x08\x8e\x86\xc3\xff\x8d\xa1\x44\x35\x2d\xa9\xdd\xcd\xb8\x9b\x2a\x33\x82\xe1\x18\xec\x02\x5d\xa1\xed\xcd\x08\x4a\x25\x25\x9a\x71\xd4\xfa\x2c\xd5\x02\x94\xcc\xa2\xf6\xe4\xa8\x05\xee\x60\x2d\xca\x71\xf4\xec\xd4\x72\xa9\xcc\x94\x31\x36\x49\xa5\x5a\xf4\x63\x6e\x76\x00\x0b\xee\x40\xdb\xe9\x14\xe5\x89\x81\x0c\x0a\xae\x3d\x8e\xbb\x42\xb2\xd7\x18\x24\x51\x34\xbe\x7b\xa7\x2b\x98\x71\x12\x25\x64\x70\xa3\x8c\xb4\x37\x4c\x5b\xc1\x49\x59\xc3\x4a\xee\x4b\x56\x0b\x93\x94\x0b\x81\xde\x5f\xd6\x18\x59\x72\xfe\xfb\x27\xff\xe9\xfe\xc5\xc1\x20\x1d\xb4\x40\xaa\x80\xa4\xd6\x1d\xc0\xd7\xf6\x1b\x74\x1d\x22\x57\x6d\xfc\x81\xb5\x37\xb5\xcd\xf9\xd1\xc5\x5a\x74\xbb\x71\xae\xa8\x8c\x08\x9e\x40\x5e\x29\x2d\x5f\x54\x54\x7e\x7c\x7f\x9a\xf4\x0e\x08\xfe\x0b\xad\xd0\xd0\x89\x0c\xb1\x15\x12\x87\xb9\x38\x96\x8f\xf1\xe9\xff\x1f\x3f\xcd\x8b\xbc\xc0\xfc\x98\x3f\xca\x87\x98\x3f\x11\xc7\xf9\xc3\x68\xdc\xb7\x75\x28\x95\x43\x41\x1f\xdf\x9f\xee\x60\xc0\x3a\x35\x55\x66\xcb\x44\x88\xf9\x4a\x7b\x5d\x69\xda\x4e\x95\x61\xb8\x40\x6b\xb4\x32\xab\x42\xb3\xbc\xa2\x32\x0d\x3f\xd6\xa9\x3f\xf0\xb9\x43\x3f\xb7\xc6\xe3\x25\x2d\xe7\x98\xd5\xd1\xdf\x77\xc8\xf5\x2c\x7b\x7d\x76\xd2\xf5\xaa\x81\x3f\xc8\x20\xba\xdf\x7a\x77\x59\x39\x95\x45\x70\xd0\x75\x77\x8f\xc9\x8a\x8c\xcb\x50\x58\x70\xb0\xa6\x66\x8f\xb2\x17\x76\x8e\xb5\x62\xcd\xf0\x59\xd8\x26\x83\x4e\x79\x00\x38\xa4\xca\x99\xc6\xea\xdb\x49\x6a\x20\xb6\x53\x54\x1f\xe4\x21\x83\xf3\xcd\x77\x80\x18\xbd\x7a\xe0\xaf\x95\xd6\x9e\x39\xe4\xf2\xb2\x59\x2f\x8e\xe2\xc3\x6f\xeb\x7d\xae\xb0\xc2\xdd\xba\x95\x51\x0b\x74\x1e\x1b\x6d\x72\x95\xa0\xca\xe1\x1e\xe4\x00\x36\xe3\xaa\x05\xdf\x6c\x17\x47\xf1\x46\xf9\x62\x17\x2d\xab\xb8\xd8\x95\x55\x26\x89\x21\x1e\xfc\x2d\x41\x75\xa3\xbf\x3b\xfd\x31\xdc\xc4\xe8\x92\x66\xfb\x96\x3b\x3e\xf3\x3d\xc6\x7a\x12\xb6\xe0\x4e\xf1\x5c\xd7\xf4\xed\x93\x3c\x87\x9f\xcf\xde\xfc\xca\xe6\xdc\x79\x4c\xf6\x28\x0d\x60\x04\xa6\xd2\x7a\xab\x9c\xc3\xe5\x86\x2e\x80\x7f\xbd\xed\x88\x42\x3f\xb7\xdd\xdb\x73\x0e\x5a\x8b\xf3\xe8\x45\x53\xdd\x75\xb3\x44\x17\xa1\x25\x5e\x22\x77\xe8\x20\x94\x54\x5d\xe3\x1d\xc4\xdb\x1d\xfc\xd5\x53\x29\x89\xd2\xcf\x15\xba\x65\x74\xd8\x3f\x67\x86\x54\x5a\x39\x82\x68\x6e\x3d\x45\xbd\xbc\x85\x7b\x78\xb4\x8a\xd9\x93\x53\x66\xaa\x8a\xe5\x16\xa1\x3d\x7d\xe1\x50\xa2\x21\xc5\xb5\x1f\x41\xa4\x8c\xd0\x95\xc4\x3e\x64\x13\xd5\xa8\x5d\x74\x84\xb7\x03\x46\x25\x9a\x64\x9d\xc9\xa4\xed\xe6\x2d\x66\x9a\xa8\x5a\x29\x23\xfc\x42\xc9\x60\xfc\x3d\x48\x2f\xad\x5c\x6e\xa1\x91\x5b\xf6\x3f\xac\x0f\xe8\x24\xbb\x67\x3f\xee\x6a\xdf\x82\xa8\x2f\xf6\x04\x9d\xb3\x6e\xb0\x07\xaa\x6b\xdf\x37\xef\x7a\xbd\xab\xae\xdf\x87\xa9\xfc\xea\xcd\x2f\xcc\xa1\x91\xe8\x92\x8d\x7e\x2d\x61\xc2\x21\x27\x7c\xad\x71\x86\x86\x92\x9f\xea\x29\xf7\xee\xf4\x10\xbe\x16\xab\x06\x18\x6d\x35\xc4\x6d\x37\x65\xd2\x8a\x2a\xd8\xb1\x29\x52\x03\xf1\x72\x79\x22\x93\xcd\xb4\x5c\x4f\x9e\xee\x7d\xd5\x5c\xe0\x1e\xe9\x83\x9a\xa1\xad\x68\xcd\x74\xff\x4e\x0a\xd5\x7d\x6f\x4f\x79\x87\xa6\xe0\x90\x6d\x5c\xe8\x07\x12\xf3\xb8\xcf\x33\x67\x42\x73\xef\x4f\x95\x27\xc6\xa5\x4c\x62\xb2\x56\xe7\xdc\x3d\xc8\x2b\x22\x6b\xe2\x41\x5f\x59\x19\x83\xee\x03\x7e\x21\xc8\x20\x6e\x3b\x08\xe3\x6e\x73\x74\xc2\xaf\x1b\xe3\x0c\x35\x0a\xb2\x2e\x89\xf9\x39\x29\x0a\x6f\x84\xb7\x0e\x89\x54\xb1\x84\x77\x75\xe7\x5c\xc4\x03\xa6\x8c\x47\x47\x2f\xe4\x15\x17\x68\x68\xe3\x6e\x41\x18\x32\x14\x1f\x02\xdf\x76\xdc\x1a\xa1\x95\xb8\x0e\xcf\x85\x9d\x34\x75\x28\x6d\x67\x22\x64\x5b\xd3\x78\x6f\xd1\xac\x4b\xe6\x10\x86\x0d\x07\x5b\xef\xaa\xd0\xc5\xe1\x65\x9d\x36\x4f\xeb\x3f\x03\x00\x00\xff\xff\xc6\x14\xdf\x51\x74\x0b\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2932, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaAllianceGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4d\x0a\xc2\x30\x10\x85\xd7\x19\x98\x3b\xe4\x1c\xd9\x89\x55\x28\xa8\x9b\xba\x13\x17\x31\x1d\x4a\x30\x3f\x65\x9a\x82\x22\xbd\xbb\x90\xa2\xa6\xea\xf2\x7d\x24\xef\x7d\x93\xee\x3d\xc9\x95\x73\x56\x07\x43\xf2\x81\x20\x0e\xda\x93\x92\x4d\x62\x1b\x3a\x04\x51\xe9\x44\xdb\x38\x86\x96\xda\x82\x6e\x6e\x64\xc6\x14\xb9\xae\x94\xac\x43\x42\x10\x47\x6b\xae\xc4\x7f\x9e\x28\xb9\x8e\xdc\x47\xd6\xc9\xc6\x80\x20\xf6\xe4\x2f\xc4\x83\x92\xa7\xd7\xec\x4c\xce\x08\xa2\x36\x31\x0c\xea\xed\x93\x23\xc2\x84\x80\xb0\x10\x9d\x7f\x64\xdd\xa2\xfc\x23\x53\xc0\xaf\xf9\xdf\xae\x3c\x92\xab\x76\x9a\xbb\x1c\x8b\x2b\x1a\xaf\x9d\x5b\xb2\x09\xe1\x19\x00\x00\xff\xff\x90\x82\x43\xd4\x36\x01\x00\x00")

func assetsSchemaAllianceGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaAllianceGql,
		"assets/schema/alliance.gql",
	)
}

func assetsSchemaAllianceGql() (*asset, error) {
	bytes, err := assetsSchemaAllianceGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/alliance.gql", size: 310, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaCharacterGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x4f\xc3\x30\x0c\xc5\xcf\xf1\xa7\xf0\x6e\xf0\x15\x72\xdb\x1f\x81\x2a\xd0\x04\x74\xb7\x69\x87\x28\x35\x2c\xc2\x4b\x2a\xc7\x45\xaa\xd0\xbe\x3b\x6a\xb6\xae\xdd\x81\x4b\xd5\xdf\x7b\xf2\x73\xfc\xb4\x6f\x09\xd7\x47\x27\xce\x2b\x09\xfe\x82\x59\x32\x07\x17\x3d\x55\x1b\x8b\x55\x54\x30\xcb\xe8\x29\xab\xf4\x37\x61\x15\x44\x8f\x8d\xeb\x2d\xd6\x2a\x21\x7e\x2d\xc0\xac\x38\xa5\x86\x43\x1c\xa7\x16\x60\xd6\x49\xda\x24\x4e\x43\x8a\x93\xb8\xa1\xec\x25\xb4\x83\x38\x4e\x83\x79\xa6\xd8\x90\xcc\xd2\xb6\xee\x44\x33\xfc\x70\x7e\x96\x5b\x93\xef\x24\x68\x5f\xab\xd3\x2e\x5b\x7c\xe2\xe4\xf4\x6e\x9d\xc5\x19\x4c\x07\x59\x1c\xff\xc0\xd4\xdf\x81\x39\xdb\xe9\xf2\x8b\x70\x35\xde\x3b\xea\xc8\xe2\x7e\x82\x4a\xe9\x74\x00\xc4\x97\xc0\x7c\x72\x81\xf3\xc3\x8a\x3e\x93\x50\x79\xd4\xa3\xc5\xfd\x68\x6c\x53\x43\x07\x38\x03\xdc\x17\x5b\x92\x86\x76\xd7\x9d\x08\x45\x2d\xfc\x4a\x3f\xc4\xd7\x4e\x8b\x70\x6b\xb8\x50\x9b\x42\xd4\x5c\xc5\x02\x57\x63\xd7\xb7\x64\x71\xf8\xfe\xb3\x23\x0f\x4b\xc6\xeb\xf6\xf7\xde\x01\xcc\x2e\xa9\xe3\xfa\xed\x92\x76\x86\xbf\x00\x00\x00\xff\xff\x40\xf4\x17\x77\xfe\x01\x00\x00")

func assetsSchemaCharacterGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaCharacterGql,
		"assets/schema/character.gql",
	)
}

func assetsSchemaCharacterGql() (*asset, error) {
	bytes, err := assetsSchemaCharacterGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/character.gql", size: 510, mode: os.FileMode(438), modTime: time.Unix(1495685945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaCorporationGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xd1\x0a\xc2\x30\x0c\x45\x9f\x57\xe8\x3f\xe4\x3b\xfa\x26\xdd\x06\x03\x75\x30\xf5\x03\x62\x09\x5a\xdc\x9a\x11\x23\x28\xe2\xbf\x8b\x83\xb1\xaa\x6f\xbd\x87\xdb\x73\x89\x3e\x46\x02\xcf\x32\xb2\xa0\x46\x4e\xf0\xb4\xa6\x58\xf5\x7d\xc4\x14\xa8\x29\x1d\x34\x49\xad\x29\x7c\xd5\x2e\xa1\xa4\x6b\x90\x38\x7e\xea\x0e\x76\x2a\x31\x9d\xac\x29\xb6\x38\x50\x16\xbd\xd0\x24\x2c\x51\xff\x30\xcb\x22\xab\x31\xfc\x88\x36\x34\x1c\x49\x3c\xdf\x92\xce\xa5\x3d\xde\xbb\xc9\x53\xf7\x8c\x13\x88\xe1\x42\x92\x7d\x3a\x74\xeb\x7c\xa5\x6a\x1d\xf8\x33\x0a\x06\x25\x59\x66\xbf\xe1\x7c\xa6\x83\xf9\x65\xcd\xcb\x9a\x77\x00\x00\x00\xff\xff\xad\x4e\x07\x5e\x13\x01\x00\x00")

func assetsSchemaCorporationGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaCorporationGql,
		"assets/schema/corporation.gql",
	)
}

func assetsSchemaCorporationGql() (*asset, error) {
	bytes, err := assetsSchemaCorporationGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/corporation.gql", size: 275, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaDogmaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x8a\x83\x30\x10\x86\xcf\x06\xf2\x0e\x79\x8e\xdc\x76\x91\xdd\xe6\x22\x05\x69\xef\xa3\x4e\x75\x68\xcc\x88\x99\x1c\xa4\xf4\xdd\x4b\xa5\xa8\x15\x8f\xf9\xc8\xff\x0d\x9f\x4c\x03\x9a\x9c\xdb\x1e\x7e\x44\x46\xaa\x92\xa0\x79\x68\x65\xcc\xf2\x74\xb9\x35\x2e\x88\x56\x59\x8e\x37\x48\x5e\xae\xe0\x13\xae\x2c\xd6\x23\x0d\x42\x1c\xac\x29\x65\xa4\xd0\xbe\x29\xc5\xc1\xc3\x54\x40\x8f\x1b\x7a\xa2\xb6\x73\xf1\x9f\xb9\xb1\xe6\x97\xd9\x23\x04\xad\x32\x57\x73\x58\x6f\xec\x26\xe7\x54\x79\x8a\x1d\x7e\x2d\x4a\x81\xfa\x0e\x95\xc7\x2d\xbc\x04\x92\x45\xf3\xd4\x4a\xab\x83\xb4\x82\x9b\x39\x2f\x3b\xa8\xfb\x64\xfd\x79\x06\xd9\xfe\xb0\x3b\xc7\x6c\x7f\x05\x00\x00\xff\xff\xba\xe9\x07\xa1\x37\x01\x00\x00")

func assetsSchemaDogmaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaDogmaGql,
		"assets/schema/dogma.gql",
	)
}

func assetsSchemaDogmaGql() (*asset, error) {
	bytes, err := assetsSchemaDogmaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/dogma.gql", size: 311, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaKillmailGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcf\x6a\xf3\x30\x0c\xbf\x07\xf2\x0e\xfe\x5e\xc3\xb7\xaf\x0b\x61\x65\x6c\x6c\xb8\xac\x87\xb1\x83\x48\x45\x2a\xea\x58\xc6\x51\x19\x61\xec\xdd\x87\x9b\xd6\x75\xba\x66\x83\xb1\x4b\xb0\x7e\x92\xfc\xfb\xe3\xc8\xe0\x51\xdd\x91\xb5\x1d\x90\x7d\xe0\x0d\xaa\xf7\xb2\x50\x09\x59\x56\x5a\x2d\x9d\xfc\xcb\xb1\x5b\xe8\xb7\x5a\x19\x09\xe4\xda\x49\x43\xa7\x53\x59\x7c\x94\x45\x59\x4c\x2e\x1f\x2f\xfe\x2f\x02\xcd\x0e\x43\xaf\xd5\xcb\xa9\x73\xc2\x5e\x7f\x62\x5e\x51\x87\x13\xe6\x7b\x66\x77\x1c\x8c\xa5\x61\x0b\xc1\x0c\xbd\x60\x97\xaf\x3f\x53\x23\xd4\x9d\xd5\x8d\x75\xec\xac\x21\xa4\xf5\xaf\x8a\xc7\xb9\xa3\x6e\x6b\x09\x5c\x83\x19\xdb\xcd\x16\x02\x34\x82\x21\xc7\x38\x78\x0e\x20\x34\xd1\x55\x41\x07\x2d\xae\x60\x87\x2e\x61\x35\x34\x17\x53\x8f\xdc\x53\x84\x74\x3a\x45\x74\x29\xd8\xe5\x61\xc5\xfa\x10\x94\xd9\x92\x5f\x0d\xfe\xaa\x22\x7d\x3e\xe6\xa3\x5a\xc5\xef\x35\xab\xa7\x27\xf8\x33\xb3\x15\x3b\xfc\xc6\x6b\x4d\x0e\xec\xc2\xf2\x9b\x56\x0b\x66\x8b\x70\xf0\x6a\xb0\xd9\x07\x92\xc1\x08\xc8\xbe\xd7\xaa\xb6\x0c\x32\xe3\x75\x8d\xe0\xd9\xfd\x32\x80\x7c\x7d\x3e\x94\x18\xf5\x18\x48\x6d\xa1\x4d\x24\x11\xbe\xe0\x9d\x7d\xa4\xa7\x3d\x38\x21\x19\x2a\xec\x25\xf0\x80\x9b\xb4\x92\x3a\x81\xbd\xcf\x70\x43\xae\xb5\x28\x7c\xfe\x53\x2e\x44\x7e\x06\x00\x00\xff\xff\xe5\x80\x8d\x8c\xb2\x03\x00\x00")

func assetsSchemaKillmailGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaKillmailGql,
		"assets/schema/killmail.gql",
	)
}

func assetsSchemaKillmailGql() (*asset, error) {
	bytes, err := assetsSchemaKillmailGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/killmail.gql", size: 946, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaRootGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xc1\x4a\xc4\x30\x10\x86\xcf\x1b\xc8\x3b\xa4\xb7\x08\xfb\x04\xbd\x2d\x2e\x62\x59\x10\xd6\x7a\x5b\xf6\x10\xbb\xc3\x36\x98\x36\x35\x99\x20\x45\x7c\x77\x99\xc6\xa4\x59\x11\x2f\xcd\x3f\xff\x7c\xf3\x33\x09\xf5\x5d\x0f\x83\x12\x9f\x9c\x6d\xde\x03\xb8\xb9\x16\x47\x3a\x38\xfb\xe2\x8c\x33\x9c\x27\x88\x06\x11\x42\xec\xed\x75\x50\x3b\x44\xa7\x5f\x03\x82\xcc\xaa\xd9\xd7\xa2\x19\xb1\xba\xab\x7f\x21\x15\x67\x9b\x5b\xc7\xd7\xe2\x74\xeb\x3c\xd9\x0b\x9c\x39\xdb\xbc\xcc\x13\x48\xfa\x14\x69\x54\x52\xc6\x7d\xaf\x9c\xea\x10\x9c\xcc\xaa\xa0\xb2\xb7\xa0\xd6\x4d\xd6\x29\xd4\x76\x94\x85\x2e\xf1\xd5\xa5\x81\xf6\x4d\x1b\xe3\xff\x0f\x8e\x4c\xa6\x8f\x01\x02\xfc\x39\x71\x5a\xfb\x0d\xc2\x40\xf7\xda\x19\xa3\xd5\xd8\x81\x4c\xa2\xc0\x93\xb5\x24\x83\x72\x5d\x2f\xe3\x41\x17\xa7\xa7\x5a\xab\x73\xb5\x15\x07\x98\x3f\xac\xbb\xd4\xa2\x45\xa7\xc7\x2b\x25\x44\xe0\x19\x7c\x30\x48\x0b\x0a\xea\x85\x0e\x83\x8b\xf3\xa9\xf8\x79\xe5\xa2\x2d\xb3\xa2\x85\x1e\x8c\x55\xcb\x4a\xd9\x8d\x61\xd6\x28\xd7\xce\x1e\x61\x90\xf1\x28\xb6\x2f\x9a\x0b\x7c\xd0\xc6\x0c\x4a\x1b\x99\x44\x62\xb7\xb9\xf5\xa8\x7c\x5f\xae\x9f\xfc\x6a\xf9\xe3\xbe\x03\x00\x00\xff\xff\xd8\x93\x8c\xde\x8e\x02\x00\x00")

func assetsSchemaRootGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaRootGql,
		"assets/schema/root.gql",
	)
}

func assetsSchemaRootGql() (*asset, error) {
	bytes, err := assetsSchemaRootGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/root.gql", size: 654, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSearchGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xd1\x6a\xc3\x20\x14\x86\xaf\x57\xe8\x3b\xe4\x01\xf6\x04\xde\x49\x66\x5b\x21\x8d\x45\xa5\xa5\x8c\x5d\x48\x90\xb6\x60\xb5\x18\x3b\x08\x63\xef\x3e\x8e\x49\xd5\x64\x37\xe1\xfc\xdf\x39\xff\x9f\x83\x27\x0c\x0f\x5d\x09\xad\x7c\x77\xe5\xba\x7f\x9a\xd0\x57\x3f\xeb\xd5\x1b\xbe\x68\x1b\x7a\x54\x7d\x52\x1b\xbe\x40\x1b\x73\x53\xb6\xd3\x80\x5e\xf5\x38\x0f\xdd\xfa\xaa\xbc\xea\x82\xf6\xd0\x4e\xa2\xe8\x3b\xdb\x07\x6d\x8c\x0a\x37\x67\x8b\xd4\xda\xf9\x87\xf3\x89\x16\x32\x7b\x37\xaa\x5b\xb8\xa8\xfd\xd6\x36\x38\x3f\xc8\xe1\x11\x17\x22\x47\x02\x65\xf6\x70\x7d\x99\x5b\x84\x33\xca\x8b\xa1\x0f\xfa\x0e\xb4\x90\xd9\x24\xc2\x72\xbd\x93\xf3\xf7\xab\x33\x3a\xa3\xdf\xf5\x6a\xbd\xd2\xf6\x79\x9f\x9e\x0c\x7e\x3b\xbe\xd7\x96\xb4\xf2\x1d\x8a\xa6\xa1\xb8\xad\x09\xd4\xf5\x0e\x73\x5c\x4b\xc2\xa3\x60\xad\x90\xa4\x69\xb0\xa4\xac\x1d\x01\x3f\x30\x9e\xe4\x06\xd7\xaf\x92\xb6\x47\xd2\x4a\xc6\xcf\xf2\x7c\x88\x41\x9c\x6c\xa7\x96\x60\x0d\xe6\xe2\x2c\x24\xd9\x47\x29\x93\xff\xc4\xf8\x7e\xc7\x1a\x32\x2d\x19\xef\x3a\xbf\xd4\xb8\xe8\x84\xe8\x07\xaa\xa8\x0d\x05\x41\x69\xbc\x8c\x58\x5c\x33\x66\x24\x96\x43\x12\x42\xd9\x31\x8b\x59\x9e\x76\x0c\xca\xb4\x88\xca\x10\x95\xbe\x32\x6e\x76\xf1\x18\x05\x32\x67\x80\x42\x15\x7c\x4b\xd7\xbf\xb3\x83\xb3\xaa\x46\x92\xcc\x2f\x80\xca\xf9\x18\xf3\x17\x00\x00\xff\xff\x4e\xc7\xd0\xeb\x2c\x03\x00\x00")

func assetsSchemaSearchGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSearchGql,
		"assets/schema/search.gql",
	)
}

func assetsSchemaSearchGql() (*asset, error) {
	bytes, err := assetsSchemaSearchGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/search.gql", size: 812, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSkillsGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x10\x05\xd0\x75\x03\xb9\xc3\x9c\x23\xeb\x2a\x04\x5c\x54\xd2\x0b\x04\xfa\xa9\x83\x71\x5a\xd2\xa9\x50\xc4\xbb\x4b\x03\x56\xcc\x66\xe0\x3f\x98\xff\x75\x9b\x41\xe1\xce\x29\x5d\x57\xac\xf0\x8a\x07\xbd\xac\x69\xce\x2c\xbc\xdc\xda\xa8\x70\x14\x34\xb3\x8c\x07\x62\xb8\xe0\x89\xe4\xc8\x8b\x5a\xd3\x94\x70\x92\x21\x74\x7f\x12\x34\x66\xfd\x59\x69\xef\xa6\x85\x95\x27\xf9\x62\xd9\xf5\xed\x11\xf7\x97\x6a\xb2\xcf\x91\x85\x65\xac\xea\xfa\x6d\x86\xa3\xfd\x5a\xf3\xb6\xe6\x13\x00\x00\xff\xff\x44\x32\x4a\xda\xc6\x00\x00\x00")

func assetsSchemaSkillsGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSkillsGql,
		"assets/schema/skills.gql",
	)
}

func assetsSchemaSkillsGql() (*asset, error) {
	bytes, err := assetsSchemaSkillsGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/skills.gql", size: 198, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaSolar_systemGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\xca\xc3\x30\x0c\x84\xf7\x40\xde\x41\xcf\xe1\x35\x3f\x3f\x64\x68\x29\x78\x2c\x19\x44\x11\xc1\xe0\x58\xc5\x52\x86\x50\xfa\xee\xc5\x11\x8e\x33\xb4\x9b\xef\x24\xdf\xa7\xd3\xed\x49\xe0\x39\x62\xf6\x9b\x28\x2d\xf0\xea\x3b\x80\x2b\x2e\xe4\xc0\x6b\x0e\x69\x2e\x7a\xe0\x24\x4a\x31\xa2\x06\x4e\xe3\x9f\x83\x31\x69\xf1\x6f\x11\x13\xa9\x38\xb8\xdb\x6f\xd3\xd3\x3e\x62\x09\x65\xdb\x1d\xaf\xe2\x7a\x7a\xac\x39\xe8\x36\x44\x14\x39\x13\xea\xc0\x2b\xea\x2a\x0e\xfe\x23\xe3\x8e\xf0\x8a\x79\x46\xa5\x06\xa9\xce\x8e\x31\xeb\x38\xe9\xdd\x77\x7d\x67\x9d\x4e\x07\x59\xa9\x0b\x73\x2a\x29\xe6\x15\x35\xb5\x0e\x3f\x13\x2a\xcd\x32\xaa\xfa\xb2\xde\x62\x1b\xee\xbc\xf6\x09\x00\x00\xff\xff\xbe\x42\x05\x10\x6a\x01\x00\x00")

func assetsSchemaSolar_systemGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaSolar_systemGql,
		"assets/schema/solar_system.gql",
	)
}

func assetsSchemaSolar_systemGql() (*asset, error) {
	bytes, err := assetsSchemaSolar_systemGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/solar_system.gql", size: 362, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaStructureGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x29\x2a\x4d\x2e\x29\x2d\x4a\x55\xa8\xe6\xe5\x52\x50\xf0\x4b\xcc\x4d\xb5\x02\x09\x66\xe6\xa5\x83\xf8\xc1\xf9\x39\x89\x45\xc1\x95\xc5\x25\xa9\xb9\x9e\x2e\x56\x0a\x9e\x79\x25\x20\xd1\x90\xca\x82\x54\x24\x6e\x40\x7e\x71\x66\x49\x66\x7e\x9e\x15\x9c\xc5\xcb\x55\xcb\xcb\xc5\xcb\x85\x6a\x83\x5f\x7e\x0a\xd4\x16\xb8\x10\xc8\x10\xb7\x9c\xfc\xc4\x12\x14\x51\x2b\x04\x13\x6c\x10\x20\x00\x00\xff\xff\x1c\x75\x0a\x55\xa9\x00\x00\x00")

func assetsSchemaStructureGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaStructureGql,
		"assets/schema/structure.gql",
	)
}

func assetsSchemaStructureGql() (*asset, error) {
	bytes, err := assetsSchemaStructureGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/structure.gql", size: 169, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaUniverseGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x6a\xc3\x40\x0c\x85\xd7\x16\xe8\x0e\x3a\xc7\xec\xda\x9a\x86\x2c\x1a\x4c\x53\x4a\x7f\xe8\x42\xb1\x45\x22\x70\xac\x61\x46\xb3\x48\x4b\xee\x5e\xa6\x10\xdb\xdd\x88\xa7\xb7\xf8\x3e\x9e\x5f\xa2\xd0\x4b\x3d\x3f\x08\x4d\x0d\xdb\x36\xd0\x76\x72\x84\x66\xc7\x67\x09\xb4\xf7\xa4\xd3\x11\xa1\x69\x25\xf7\x49\xa3\xab\x4d\xab\xb6\x2b\x87\x51\xf3\x49\x86\x40\xf7\x66\xa3\xf0\x84\xd0\x6c\x92\x95\xb8\x80\x9e\x79\xd0\x92\x03\x3d\x8e\xc6\xf5\x7f\xb5\xb1\x54\xf4\xed\x7f\xe0\xc8\xbd\xfa\x65\x69\x3a\x4b\xd5\xb3\xd7\x6f\xb9\x41\x9e\x38\xaf\x10\x9b\xc4\xf1\xa4\xfd\xe2\x68\xed\x78\xe6\x3b\xf7\xa4\x87\xe2\x92\x03\x7d\xfe\x6f\x76\x36\xc8\x17\xc2\x15\x01\xe1\x6f\x74\x67\x59\xab\xa3\x0e\x27\x7a\x9b\xd1\x44\xef\xab\xfc\x31\xe7\x2b\xc2\x6f\x00\x00\x00\xff\xff\xfb\x4f\x4a\x2c\x2d\x01\x00\x00")

func assetsSchemaUniverseGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaUniverseGql,
		"assets/schema/universe.gql",
	)
}

func assetsSchemaUniverseGql() (*asset, error) {
	bytes, err := assetsSchemaUniverseGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/universe.gql", size: 301, mode: os.FileMode(438), modTime: time.Unix(1495669894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema/alliance.gql": assetsSchemaAllianceGql,
	"assets/schema/character.gql": assetsSchemaCharacterGql,
	"assets/schema/corporation.gql": assetsSchemaCorporationGql,
	"assets/schema/dogma.gql": assetsSchemaDogmaGql,
	"assets/schema/killmail.gql": assetsSchemaKillmailGql,
	"assets/schema/root.gql": assetsSchemaRootGql,
	"assets/schema/search.gql": assetsSchemaSearchGql,
	"assets/schema/skills.gql": assetsSchemaSkillsGql,
	"assets/schema/solar_system.gql": assetsSchemaSolar_systemGql,
	"assets/schema/structure.gql": assetsSchemaStructureGql,
	"assets/schema/universe.gql": assetsSchemaUniverseGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema": &bintree{nil, map[string]*bintree{
			"alliance.gql": &bintree{assetsSchemaAllianceGql, map[string]*bintree{}},
			"character.gql": &bintree{assetsSchemaCharacterGql, map[string]*bintree{}},
			"corporation.gql": &bintree{assetsSchemaCorporationGql, map[string]*bintree{}},
			"dogma.gql": &bintree{assetsSchemaDogmaGql, map[string]*bintree{}},
			"killmail.gql": &bintree{assetsSchemaKillmailGql, map[string]*bintree{}},
			"root.gql": &bintree{assetsSchemaRootGql, map[string]*bintree{}},
			"search.gql": &bintree{assetsSchemaSearchGql, map[string]*bintree{}},
			"skills.gql": &bintree{assetsSchemaSkillsGql, map[string]*bintree{}},
			"solar_system.gql": &bintree{assetsSchemaSolar_systemGql, map[string]*bintree{}},
			"structure.gql": &bintree{assetsSchemaStructureGql, map[string]*bintree{}},
			"universe.gql": &bintree{assetsSchemaUniverseGql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

