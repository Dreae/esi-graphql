// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\x2c\xff\x8a\xab\x80\x55\x32\x92\x52\x4e\x5f\xd6\xc0\xb6\x52\xb4\x6b\x37\x64\xc8\xd6\x97\xb4\x1f\x86\x34\x0b\x28\xf2\x64\x31\xa1\x49\x97\xa4\x9c\x7a\x81\xff\xfb\x40\x4a\xb2\x65\x23\x2d\x86\x61\xcb\x87\x98\x2f\x77\xcf\x3d\xbc\x7b\x78\xd4\xf4\xc1\xeb\xb7\x3f\x7d\xfc\xe3\xdd\x1b\xa8\xdc\x5c\x9e\x0c\xa6\xcd\x4f\x34\xad\x90\xf2\x93\x41\x14\x4d\xa5\x50\x37\x60\x50\xe6\xb1\x75\x2b\x89\xb6\x42\x74\x31\x54\x06\xcb\x3c\xae\x9c\x5b\xd8\x71\x96\x31\xae\xae\x2d\x61\x52\xd7\xbc\x94\xd4\x20\x61\x7a\x9e\xd1\x6b\xfa\x35\x93\xa2\xb0\xd9\xcc\xd0\x45\x25\xbe\xc8\x6c\x44\x9e\x93\xe3\xcd\x94\x30\x6b\x63\xc8\x42\x14\xcb\x8c\x58\x38\xb0\x86\xfd\x63\xd4\x12\x1d\xab\xb2\x23\x32\x22\xa3\x66\x4c\xe6\x42\x91\x6b\x1b\x9f\x4c\xb3\x06\xee\xdf\x22\x1b\xa4\xcc\x65\x47\xcf\xc8\x13\xf2\xb8\x99\xfc\x8f\xd0\x8f\xb8\x9e\xff\x67\xf0\xdf\xca\xf4\x1e\xf6\x34\x6b\xcb\x3b\x2d\x34\x5f\x41\x28\x6c\x1e\xdf\x0a\xee\xaa\x31\x1c\x8d\x46\x3f\x4c\xa0\x42\x31\xab\x5c\x37\x9b\x53\x33\x13\x6a\x0c\xa3\x09\xe8\x25\x9a\x52\xea\xdb\x31\x54\x82\x73\x54\x93\x38\x90\xe5\x62\x09\x82\xe7\x71\x17\x32\xee\x50\x7b\x40\xcb\x6a\x12\x9f\x9c\x69\xca\x85\x9a\x11\x42\xa6\x19\x17\xcb\xde\x49\x4f\x06\x10\xfe\x96\xd4\x80\xd4\xb3\x19\xf2\x53\x05\x39\x94\x54\x5a\x9c\xf4\xf6\x9c\xbe\x41\xbf\x11\xc7\x93\x41\x6f\x79\x4e\x1d\xab\x20\x87\x5b\xa1\xb8\xbe\x25\x52\x33\xea\x84\x56\xa4\xa2\xb6\x22\x61\x33\xcd\x28\x63\x68\xed\x55\x40\xc8\xd3\x8b\x3f\x3f\xdb\xcf\x0f\x2f\x0f\x86\xd9\xb0\xc5\x11\x25\xa4\xc1\x74\x08\x77\xed\x12\xf4\xb9\x38\x53\x6f\xa8\xc0\x86\x48\xf0\xb8\x38\xba\xec\x76\xd6\x1d\xad\xb2\x56\xcc\x73\x80\xa2\x16\x92\xbf\xac\x5d\xf5\xe9\xc3\x59\xda\xc7\xf6\xc4\x99\x14\xa8\xdc\x29\xf7\x47\x2a\x39\x8e\x0a\x76\xcc\x9f\xe2\xf3\x1f\x9f\x3e\x2f\xca\xa2\xc4\xe2\x98\x3e\x29\x46\x58\x3c\x63\xc7\xc5\xe3\x78\xb2\xe3\x6a\x90\x0b\x83\xcc\x7d\xfa\x70\x76\xcf\xc9\xb5\x11\x33\xa1\x76\x3d\x18\x5b\x34\xc6\x1b\x49\x49\x3d\x13\x8a\xe0\x12\xb5\x92\x42\x35\x8a\xd2\xb4\x76\x55\xe6\xff\x69\x23\xfe\xc2\x17\x06\xed\x42\x2b\x8b\x57\x6e\xb5\xc0\x3c\x9c\xfb\xa1\x41\x2a\xe7\xf9\x9b\xf3\xd3\x1e\xa7\x16\xfd\x20\x87\xf8\x61\xc7\xed\xaa\x36\x22\x8f\xe1\xa0\x4f\xf6\x7e\x8f\x26\x11\x57\x5e\x46\x70\xb0\x49\xcb\x64\x10\x45\x51\xd4\xb7\xb3\x4c\x2f\x30\xd8\x84\xbc\x9e\xfb\x69\x3a\xdc\x88\x01\xc0\xa0\xab\x8d\x6a\xb1\x7b\x55\x89\xa2\x68\xb7\x24\xad\x2b\xdc\x85\x18\x3e\x3f\x01\xdb\x42\x0e\x17\x61\x29\x4a\xd0\x8a\x47\xf6\x46\x48\x69\x89\x41\xca\xaf\xda\xf1\xf2\x28\x39\xfc\x9e\xc5\x97\x1a\x6b\xdc\x5a\x5d\x4e\x42\xf4\xa8\x65\xd6\x44\x21\xd7\x5a\xa8\x34\x81\x64\x38\x01\xbf\xbb\xc7\x30\x5c\xa5\xf7\x67\x3f\xfb\xde\x86\x26\x6d\xa7\xef\xa8\xa1\x73\xdb\x51\xde\x59\x24\x4b\x6a\x04\x2d\x64\xe0\xff\xad\x9d\x17\xf0\xeb\xf9\xdb\xdf\xc9\x82\x1a\x8b\xe9\x37\x8c\x86\x30\x06\x55\x4b\xb9\x2b\x1d\xdf\x33\xd0\x78\xec\xbb\xf5\x76\xc7\x5f\x99\xee\x86\xf4\x95\x0d\x9d\xfd\x45\xfc\xb2\xd5\x51\x50\x65\x7c\xe9\xc5\xf7\x0a\xa9\x41\x03\xbe\x86\x41\x4d\x5b\xbc\xf5\x4e\xa2\x42\x63\x4f\xe3\xec\x4b\x8d\x66\x15\x1f\xb6\xa7\x8e\xe6\xe8\x2a\xcd\xc7\x10\x2f\xb4\x75\x71\x5b\x08\xdf\xcb\xc6\xcd\xe9\xac\x33\x42\xcd\x44\xb9\xda\xcb\x5a\x6b\xc9\x0c\x72\x54\x4e\x50\x69\xc7\x10\x0b\xc5\x64\xcd\xb1\x83\x69\x69\x8f\x3b\xfe\xcd\xf2\x7a\x48\x5c\x85\x2a\xdd\x54\x27\xed\xee\x44\x57\x8a\x8e\x72\xb7\x4e\x1c\x7e\x75\x5e\x96\xdf\x77\x7f\xa5\xf9\x6a\x03\xe1\xcc\xaa\x1b\x76\x70\xbd\x6a\xed\xb8\x34\xb8\xd1\x1a\x58\xe8\x7b\x29\x1a\xa3\xcd\x70\xdf\xbb\xef\xd2\x79\xb4\x84\x26\x5b\xc9\x7d\xf0\x0f\xd1\xeb\xb7\xbf\x11\x83\x8a\xa3\x49\x83\x45\x58\x24\xcc\x20\x75\xf8\x46\xe2\x1c\x95\x4b\x7f\x09\xdd\xfd\xfd\xd9\x21\xdc\x95\x8d\x2c\xc7\x7b\x32\x5d\xb7\x39\xe6\x9a\xd5\xde\x85\xcc\xd0\xb5\xde\xaf\x56\xa7\x3c\xdd\x3e\x10\x43\x6f\xb7\xbd\xb5\x6d\xf3\xb2\xe8\x3e\x8a\x39\xea\xda\x6d\x72\xb5\xd3\x30\xbd\xdc\x1e\xdc\xaf\x37\xaf\x51\x0a\x39\x6c\x42\xef\x72\x4f\x68\x32\x9c\xf4\xcc\x29\x61\x92\x5a\x7b\x26\xac\x23\x94\xf3\x34\x71\x5a\xcb\x82\x9a\x47\x45\xed\x9c\x56\xc9\x70\xc7\x56\x28\x85\xe6\x23\x7e\x75\x90\x43\xd2\x09\x1a\x93\x41\xcf\x68\x13\x37\x88\xf5\x1c\x25\x32\xa7\x4d\x9a\xd0\x0b\x27\x9c\x7f\x0a\xdf\x19\x74\x4e\x94\x2b\x78\x1f\xd4\x7c\x99\x0c\x89\x50\x16\x8d\x7b\xc9\xaf\x29\x43\xe5\xb6\x54\x4b\x87\xbe\x16\xc9\x21\xd0\x3d\xd2\x5a\x31\x29\xd8\x8d\x7f\x18\xef\xcb\x4f\x2f\x95\xdd\x3b\x00\xf9\xde\xfb\xd3\x07\x5c\x0f\xf6\x47\xeb\x43\x18\xf9\xda\xec\x7c\x2f\xf8\xbb\x75\x32\x98\x66\xe1\xf3\xf0\xef\x00\x00\x00\xff\xff\x31\x50\x3e\x30\x35\x0a\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2613, mode: os.FileMode(420), modTime: time.Unix(1495465487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x8e\xa3\x38\x10\x3e\xe3\xa7\x20\xb7\xac\x34\x4f\x90\x1b\x4d\x48\x1a\x6d\x3a\xc9\x00\xd3\xa3\x56\x2b\x07\x37\xd4\x06\xab\x8d\xcd\xda\x66\x76\xd8\xd1\xbc\xfb\xca\x10\xfc\x43\xe8\xd1\x68\x2f\x89\xeb\xa3\xfc\xb9\xea\xab\x2a\x83\x2c\x6b\x68\x70\xf8\x03\x05\x7f\x77\x20\xfa\x4d\xf8\x59\xff\xa1\x9f\x08\xa9\xbe\x85\xd1\x0a\x7f\xa0\x30\xdc\xf2\x6b\x83\x23\xa5\x04\x79\xeb\x14\xac\xcd\x2a\xdd\x6e\xc2\x94\xa9\xd5\x1f\x9b\x99\xcb\x0a\x05\x3e\x20\x37\xe1\xab\x8f\x1c\x79\x05\x17\x14\x14\x7d\x0b\x6b\xfd\xe3\x70\x69\x73\x85\x82\xb8\xc6\x02\x97\x0a\xc4\xda\xac\x1c\x27\x83\x69\x4f\x2e\x5a\x2e\xb0\x22\x9c\xad\x9d\xb5\xeb\x6d\xd1\x15\x0a\xf2\x77\x42\xa9\xfc\x35\xed\xe8\x33\x39\x7f\xee\xa0\x83\xc5\x0d\xaf\xf6\x79\xaa\xa0\xb9\xa0\x20\xa2\x94\x60\x56\xc2\x7a\x5a\x38\xde\x13\xa4\x79\x01\x8b\xb2\x5e\x8f\x7f\x3a\x65\xad\x91\xb5\x2e\xab\x4f\xe1\x9f\xd0\xff\xc3\x45\xb5\x09\x73\x25\x08\xbb\x6a\x82\xd1\x21\x03\xd9\x51\x25\x57\xa6\x56\xbe\xb6\x43\xd1\xe6\x55\x42\xc1\x16\xfe\xc2\x1d\x55\xcf\x98\x76\x60\x20\x59\x0a\xd2\x6a\x5d\xa6\x53\x50\xb0\x25\xb2\xa5\xb8\x3f\xe2\x06\x2c\xf8\x48\xae\x75\x2a\xf7\x9c\x57\x9b\xf0\x81\x73\x0a\x98\xa1\x20\x2d\x8d\xca\x28\xf0\xfd\xcf\xdd\x1b\x25\xb2\x06\xd7\x3d\x57\xb8\x7c\xc7\x6f\x14\x1c\xec\x0b\x23\x6a\xa2\x58\xce\x46\x77\x8a\x6e\xd2\xfb\x84\x6e\x99\xec\x28\xc7\xca\x79\x3e\xef\x46\xc3\xab\x75\xd5\x4c\x4e\xbf\xcd\xc3\x5e\x14\x64\x29\x97\xbd\xe0\x5d\x6b\x48\x32\x5c\x91\x4e\x9a\x50\x9e\x39\xed\x1a\x1b\x59\x8c\x5b\x5c\x12\xd5\x1b\xe0\xcc\x85\x3e\x21\x27\xff\x4e\x85\x78\xc2\xd2\x6e\xdf\x0b\xdc\xd6\xa4\xb4\x85\xfb\xad\x59\x9a\xb2\x34\x5d\x3a\x88\xe6\xf7\x20\x0a\x22\x56\x82\x54\xa2\x37\xc0\x03\x11\xaa\xae\x70\x6f\xd3\x7d\xa0\x9c\x57\x94\x30\xbb\xe9\x7e\xa8\x3e\x50\x6a\x0f\xac\x02\x61\x6d\x5f\xdc\x0c\x3b\x81\xe4\x50\x76\x82\xa8\x3e\x57\x58\x39\xd2\x39\x47\x79\x63\x6b\x53\xb1\x53\x34\x4d\xf2\xdd\xd8\xba\x53\xbb\x30\xa2\x46\x29\x4b\xbf\xa8\x55\x9c\x9c\x7e\x9d\xae\x9f\x5e\x2c\x60\xe0\xda\x62\x35\x47\xb9\x30\x44\x3b\x5c\xfa\x24\x4f\xd0\xbc\x81\x88\x79\xc7\xd4\xcd\xa5\xc0\xdf\xb3\x81\xe3\xa6\x49\x41\xca\x77\x57\xd5\x2f\xd9\xc1\xe1\x4f\x4e\x4e\xfe\xe6\x3c\x0f\x5b\x90\xee\xae\x5b\x06\x91\xb4\x0c\x71\x27\x04\x30\x35\xd8\x07\xf8\x06\x74\x2a\x98\x06\x6c\xf9\xb4\xd5\x72\xc2\x94\x4c\xd9\x60\x4c\xc1\xf7\x2d\x8c\x77\xf8\x07\x67\x48\x7d\xc8\x54\xb8\x57\xff\x99\x7e\x23\x70\x85\x69\x7e\xf6\x6f\x04\xbf\x82\x9a\x60\x47\x18\x91\xb5\x2f\xf5\x88\x41\xe5\x46\x3d\xac\x13\x56\x4d\x8c\x23\x90\x2b\x2c\x94\x81\x06\xe2\x33\x97\x64\x2c\xcc\x52\xb6\xda\xdf\x3f\xac\x10\x98\x30\xc2\xae\x3e\xd5\x42\xf6\x93\xe4\x3a\xea\xd9\x65\x83\x15\xec\x78\xc7\x2a\xa8\x2c\x98\x7c\x87\xb2\x73\x1b\x66\x5e\xfd\xc9\x61\x36\x1e\x63\x1b\x69\x49\xa7\x03\x47\xe4\x32\x5e\xd3\xd2\xd6\x7e\x30\xef\xc2\x1b\xbd\x87\x06\x58\x98\xf6\x0f\xc7\x72\x4e\x33\x90\x6b\x96\x03\x16\xd7\xc1\xb2\x91\xe7\x0d\xa6\xd4\x83\x4c\x7d\xdd\xd7\xda\x30\x8b\x57\x60\x4a\x27\x93\x32\xe5\xbc\x53\xdd\xf4\x46\xef\x8b\xf3\xa1\xe0\xf5\x93\x7d\xcc\x99\x54\x40\xe9\x10\xaf\xa5\x74\x92\x18\xf6\x59\xd3\xec\xbc\x8d\xaa\xdd\x93\xb2\x6f\xc0\x14\x17\xfd\xf4\xbe\x4e\x9e\x13\xbd\x34\x3b\x32\xb8\x7a\x1b\x72\x4e\xb1\xc8\x7b\xa9\xa0\x71\x40\x35\x0b\xe5\x2b\x17\x4d\xcd\x29\x18\xe4\x27\x42\xc0\xba\x26\xb4\x9f\x03\x83\x26\xfb\xe4\x58\x7c\x42\x41\x74\x38\xa4\xd1\x31\x4e\x3e\xa1\x20\x7e\x8c\xb2\x28\x2e\x92\x4c\xaf\x4f\xc7\xbc\x48\x0e\x87\xa8\x48\x4f\xc7\xc1\xce\xce\xa7\x6c\xb2\x76\x51\x7c\x5b\xa5\xc7\xe7\xe4\x58\x9c\xb2\x97\xe2\xe5\xac\x39\xb2\x64\x3f\x3e\xc8\x4f\x87\x28\xcb\x5f\xf2\x22\x79\xd2\x56\x31\x6d\xfd\x7a\xca\x9e\x1e\x4f\x87\xe4\xae\xd6\x63\xda\xcb\xaf\x99\xdf\xb8\x71\xec\xf6\xf9\x87\x95\x83\xb8\xf7\xd8\xc2\xbd\xed\x70\xfc\x9f\xae\xf5\xea\x77\xf7\x69\xe0\x0e\xf3\x7f\x01\x00\x00\xff\xff\xdf\x36\x42\xb8\x2d\x0b\x00\x00")

func assetsSchemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaGql,
		"assets/schema.gql",
	)
}

func assetsSchemaGql() (*asset, error) {
	bytes, err := assetsSchemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema.gql", size: 2861, mode: os.FileMode(420), modTime: time.Unix(1495471961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema.gql": assetsSchemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema.gql": &bintree{assetsSchemaGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

