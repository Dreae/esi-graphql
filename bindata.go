// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xed\x6f\xdb\xb6\x13\xfe\x9e\xbf\xe2\x2a\xe0\x57\xc9\x48\x4a\x39\x7d\xf9\x35\xb0\xad\x14\xed\xda\x0d\x19\xb2\xf5\x25\xed\x87\x21\xcd\x02\x8a\x3c\x59\x4c\x68\xd2\x25\x4f\x4e\xbd\x22\xff\xfb\xa0\x57\x4b\x8e\x83\x16\xc3\xf6\x25\x21\x75\x77\x0f\x9f\xbb\x7b\xc8\xf3\xec\xc1\xeb\xb7\x3f\x7d\xfc\xe3\xdd\x1b\xc8\x69\xa1\x8f\xf7\x66\xf5\x3f\x80\x59\x8e\x5c\x96\x0b\x80\x99\x56\xe6\x1a\x1c\xea\x24\xf0\xb4\xd6\xe8\x73\x44\x0a\x20\x77\x98\x25\x41\x4e\xb4\xf4\x93\x38\x16\xd2\x5c\x79\x26\xb4\x2d\x64\xa6\xb9\x43\x26\xec\x22\xe6\x57\xfc\x6b\xac\x55\xea\xe3\xb9\xe3\xcb\x5c\x7d\xd1\xf1\x98\x3d\x67\x47\xdd\x96\x09\xef\x03\x88\x9b\x73\xbc\x70\x6a\x49\xe0\x9d\xf8\x61\xdc\x0c\x49\xe4\xf1\x21\x1b\xb3\x71\xbd\x66\x0b\x65\xd8\x95\x0f\x8e\x67\x71\x0d\xf7\xcf\xb1\x1d\x72\x41\xf1\xe1\x33\xf6\x84\x3d\xae\x37\xff\x29\xf8\x23\x69\x17\xff\xe2\x01\xf7\x55\x7c\x1b\x7d\x16\xb7\x9d\x9e\xa5\x56\xae\xa1\x6a\x71\x12\xdc\x28\x49\xf9\x04\x0e\xc7\xe3\xff\x4d\x21\x47\x35\xcf\xa9\xdd\x2d\xb8\x9b\x2b\x33\x81\xf1\x14\xec\x0a\x5d\xa6\xed\xcd\x04\x72\x25\x25\x9a\x69\xd0\x10\x96\x6a\x05\x4a\x26\x41\x7b\x6c\xd0\xe2\xf6\xa0\x56\xf9\x34\x38\x3e\xb5\x5c\x2a\x33\x67\x8c\xcd\x62\xa9\x56\x83\x7c\xeb\x0d\xc0\x8a\x3b\xd0\x76\x3e\x47\x79\x62\x20\x81\x8c\x6b\x8f\xd3\x9e\x8d\xec\x35\x96\x86\x20\x98\xee\xf5\x3e\x2f\x38\x89\x1c\x12\xb8\x51\x46\xda\x1b\xa6\xad\xe0\xa4\xac\x61\x39\xf7\x39\xab\x8c\x51\xcc\x85\x40\xef\x2f\x2b\x84\x24\x3a\xff\xf3\xb3\xff\xfc\xf0\x62\x7f\x14\x8f\x1a\x1c\x95\x41\x54\xb9\x8e\xe0\x5b\xf3\x09\xfa\x5c\xc8\x15\x1d\x15\xe8\x88\x54\x11\xe7\x87\x17\xad\xe5\xb6\xa5\x95\x15\x46\x94\x1c\x20\x2d\x94\x96\x2f\x0b\xca\x3f\x7d\x38\x8d\xfa\xd8\x25\x71\xa1\x15\x1a\x3a\x91\x65\x4a\x99\xc4\x71\x2a\x8e\xe4\x53\x7c\xfe\xff\xa7\xcf\xd3\x2c\xcd\x30\x3d\xe2\x4f\xd2\x31\xa6\xcf\xc4\x51\xfa\x38\x98\x0e\x42\x1d\x4a\xe5\x50\xd0\xa7\x0f\xa7\x3b\x32\xb7\x4e\xcd\x95\x19\x46\x08\xb1\xac\x9d\x3b\x61\x69\x3b\x57\x86\xe1\x0a\xad\xd1\xca\xd4\xba\xb2\xbc\xa0\x3c\x2e\xff\x58\xa7\xfe\xc2\x17\x0e\xfd\xd2\x1a\x8f\x97\xb4\x5e\x62\x52\xe5\xfd\xd0\x21\xd7\x8b\xe4\xcd\xd9\x49\x8f\x53\x83\xbe\x9f\x40\xf0\xb0\xe5\x76\x59\x38\x95\x04\xb0\xdf\x27\xbb\x3b\xa2\x2e\xc4\x65\x29\x24\xd8\xef\xca\xb2\xdb\xd7\x0b\xbb\xc4\xca\xaf\xaa\xed\x59\xb9\x8d\x46\x9d\x20\x00\x1c\x52\xe1\x4c\x13\xf3\x9d\xce\x34\xd1\x5b\x7d\xa9\x8e\xf0\x90\xc0\x79\xf7\x19\x20\x44\xaf\x1e\xf9\x6b\xa5\xb5\x67\x0e\xb9\xbc\x6c\xd6\xab\xc3\xf0\xe0\xbb\x6e\x5f\x0a\x2c\x70\xa7\x6b\x61\xd4\x0a\x9d\xc7\xc6\x99\x5c\x21\xa8\x70\x58\xe1\x76\xbe\x17\x77\xd3\xab\x39\xb2\x2b\xab\x4c\x14\x42\x38\xba\x3f\xd1\xea\x6a\xbe\x3f\xfd\xb9\x7c\x35\xd1\x45\xcd\xf6\x1d\x77\x7c\xe1\xfb\x99\x0f\x0c\x6c\xc5\x9d\xe2\xa9\xae\xca\x70\x9f\xe5\x05\xfc\x7a\xf6\xf6\x77\xb6\xe4\xce\x63\x74\x8f\xd3\x08\x26\x60\x0a\xad\x87\x62\x2c\x9f\x22\x74\x25\xf6\xb7\xdb\x8d\xa5\xbc\x84\xed\x9d\xeb\x33\x83\xd6\xff\x3c\x78\xd9\x28\xb3\xd2\x79\x70\x51\xca\xf9\x15\x72\x87\x0e\x4a\x45\x54\xfa\xdc\xe0\xdd\xde\xa9\x5a\x35\x3a\xa2\x20\xfe\x52\xa0\x5b\x07\x07\x83\x33\x16\x48\xb9\x95\x13\x08\x96\xd6\x53\xd0\x6f\x54\xf9\x5e\x4e\xea\x5c\x3d\x39\x65\xe6\x2a\x5b\x6f\xd5\xb1\xef\x2e\x1c\x4a\x34\xa4\xb8\xf6\x13\x08\x94\x11\xba\x90\x38\x00\x6c\xd2\x99\xb4\x8b\x8d\xed\x76\xc4\x28\x47\x13\x75\xdd\x8b\xda\x1b\x38\x2c\x48\x93\x4f\x6b\x64\x84\x5f\x29\x1a\x4d\x7f\x00\xe7\x95\x95\xeb\x21\x16\xb9\xf5\x60\xdf\xa1\xf7\xba\x3b\x88\x9e\xf6\x9c\x6f\x41\x54\xcf\x6f\x84\xce\x59\x37\xda\x0d\xd4\x8f\x1e\x04\xf7\xf8\xde\x11\xf0\x87\x72\x58\xbe\x7e\xfb\x1b\x73\x68\x24\xba\xa8\xf3\xad\x0c\x4c\x38\xe4\x84\x6f\x34\x2e\xd0\x50\xf4\x4b\x35\x7f\xde\x9f\x1e\xc0\xb7\xac\x16\xfa\x64\x4b\xf8\xb7\xbd\x1e\x49\x2b\x8a\x32\x8c\xcd\x91\x1a\x84\x57\xeb\x13\x19\x6d\xc6\x58\x3b\x17\x36\x0f\x4b\xf3\xc6\x7a\xa4\x8f\x6a\x81\xb6\xa0\xae\xb6\x83\xf7\xa3\xd4\xf0\x83\xdd\x22\x2e\x85\xcf\x21\xd9\x9c\x3e\x4c\x21\xe4\xe1\xa0\xb2\x9c\x09\xcd\xbd\x3f\x55\x9e\x18\x97\x32\x0a\xc9\x5a\x9d\x72\xf7\x28\x2d\x88\xac\x09\x47\x03\x5f\x65\x0c\xba\x8f\xf8\x95\x20\x81\xb0\xbd\x25\x18\xee\xf5\x9c\xba\x73\x2b\xf5\x9f\xa1\x46\x41\xd6\x45\x21\x3f\x27\x45\xe5\xcc\x7e\xe7\x90\x48\x65\x6b\x78\x5f\x5d\x8f\x8b\x70\xc4\x94\xf1\xe8\xe8\xa5\xbc\xe2\x02\x0d\x6d\xa8\x66\x84\x65\x5b\xc2\x03\xe0\x5b\xa4\xad\x11\x5a\x89\xeb\x72\x7e\xef\xaa\x4f\xaf\x94\xed\xb8\x82\x64\x6b\x4c\xde\x23\x91\x56\x20\x07\x30\xae\x73\x1f\xfe\xbc\x29\x6f\xe9\xf1\xde\x2c\xae\x7f\xd9\xfe\x1d\x00\x00\xff\xff\xda\x78\x9c\x70\xf1\x0a\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2801, mode: os.FileMode(420), modTime: time.Unix(1495552564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x72\xdb\x36\x10\x3e\x93\x4f\x01\xdd\xd4\x19\x3f\x81\x6e\x32\x4d\xcb\x9c\xea\x2f\x24\xe3\xd4\xf5\xe8\x00\x93\x5b\x09\x63\x08\x50\x41\x30\x0d\x9b\xc9\xbb\x77\x00\x08\x7f\x14\x9d\xc9\xf4\x22\x61\x3f\xee\x7e\xd8\x1f\x60\x17\x5d\x73\x82\x33\x46\xdf\xd3\xe4\xef\x1e\xc4\xb0\x40\x9f\xd4\x5f\xfa\x23\x4d\xe5\x70\x01\x23\xa1\xef\x29\x42\x0f\xfc\x78\xc6\x4b\x29\x05\x79\xeb\x25\xcc\xdd\xaa\x78\x58\xa0\x82\xc9\xd9\x6f\x8b\x91\xca\x2c\x4d\x62\xa0\x5b\xa0\xd7\x18\xd9\xf2\x16\x0e\x69\x52\x0f\x17\x98\xab\x9f\x80\x4b\x89\xb3\x34\xc9\x4e\x58\xe0\x46\x82\x98\xbb\x55\xa0\xe4\x30\xa5\xc9\xc5\x85\x0b\x2c\x09\x67\xf3\x60\x1d\x6a\x7b\x74\x96\x26\xd5\x3b\xa1\xb4\xfb\x39\xad\xd1\xb1\xca\x9f\x7a\xe8\x61\xd2\xe0\xd5\x7f\x2f\x24\x9c\x0f\x69\xb2\xa4\x94\x60\xd6\xc0\xdc\x2e\x02\x6d\x0b\x29\x5e\xc0\xa2\x39\xcd\xcd\x9f\x0a\x59\xe5\xc8\x4b\x87\xd9\x1d\xfa\x1d\x86\x7f\xb8\x68\x17\xa8\x92\x82\xb0\xa3\x22\x30\x0a\x25\x74\x3d\x95\xdd\x2c\x45\xea\x53\xdf\xc8\x5e\x18\x73\x2b\x98\xec\x06\x5f\xe7\x6e\xa5\xbc\x79\xa4\x1c\x6b\x7f\x1c\xaa\xa9\x38\xc5\xa2\x1a\x3a\x09\xe7\xb9\xf9\x0b\x3c\x0f\x3e\xce\xdc\x11\x89\x4b\xaa\xcf\xca\xf8\x70\xa4\xc9\x03\xfc\x85\x7b\x2a\x9f\x31\xed\xc1\x41\x5d\x23\xc8\x45\x95\xc3\x06\x97\x26\x0f\xa4\xbb\x50\x3c\x6c\xf1\x19\x3c\xf8\x44\x8e\xa7\xa2\x5b\x71\xde\x2e\xd0\x3d\xe7\x14\x30\x4b\x93\xa2\x71\xc5\x4d\x93\x58\x7f\xdf\xbf\x51\xd2\x9d\x20\x54\xaf\x24\x6e\xde\xf1\x1b\x85\x00\xfb\xcc\x88\xb4\x14\xd3\xd1\xa8\x14\xaa\xbb\x71\x1b\xd0\x35\x12\x9d\xc4\xe0\xfb\xf8\x12\x38\x5e\x55\x4e\xc5\x14\x1c\xf3\xb1\xdb\x93\x09\x99\x8a\x65\x25\x78\x7f\x71\x24\x25\x6e\x49\xdf\x39\x57\x9e\x39\xed\xcf\xde\xb3\x0c\x5f\x70\x43\xe4\xe0\x80\x3d\x17\x6a\x87\x8a\xfc\x6b\x0b\xb1\xc1\x9d\x37\x5f\x09\x7c\x39\x91\xc6\x17\xee\x97\xae\xb0\x8d\x72\xcf\x3b\xa2\xd8\xf5\x29\xf8\xc3\x92\x22\xf4\xe2\x97\x7f\xda\xa5\xb5\x71\x17\x4a\x27\x3a\xbe\x2e\x69\xb2\x64\x0d\x74\x52\x0c\x0e\xb8\x27\x42\x9e\x5a\x3c\xf8\x14\xdd\x53\xce\x5b\x4a\x98\x37\xba\xbd\xff\x1f\x64\x77\x05\xac\x05\xe1\xe5\xb8\x20\x25\x0e\x1c\xa9\xa0\xe9\x05\x91\x43\x25\xb1\x0c\xd2\x1d\x6c\x15\x75\x18\x1f\x8a\xbf\xf0\xb6\xe9\xdc\x74\x98\xb0\xc1\x4c\x74\x13\x97\x29\x4f\x3f\x99\xab\x2c\xdf\xfd\x3c\xdc\x38\xbc\x4c\x80\xe6\x7a\xc0\x72\x8c\x72\xe1\x88\x1e\x71\x13\x93\x6c\xe0\xfc\x06\x22\xe3\x3d\x93\x57\x95\x1a\x7f\x2b\x35\xc7\x35\x27\x35\x69\xde\xc3\xac\x7e\x2e\xd7\x01\x7f\xbe\x0b\xe2\x77\xfb\x45\xd8\x44\xea\x6e\x4e\x8b\x4e\x92\x4a\x43\xd6\x0b\x01\x4c\x6a\x79\x0d\x5f\x81\xda\x82\x29\xc0\x97\x4f\x49\x17\x4e\x98\xec\x0a\xa6\x05\xeb\xfc\x70\x01\x33\x6e\x3e\xd8\xa3\x53\x9b\xd8\xc2\xbd\xc6\xdf\xd4\xf0\xe2\x12\xd3\x6a\x1f\x77\x91\xb8\x82\x8a\xe0\x91\x30\xd2\x9d\xe2\x54\x1b\x0c\xda\xd0\x6b\xbd\xce\x59\x6b\x19\x0d\x50\x49\x2c\xa4\x83\x34\xb1\xbd\x6a\xd3\xd1\x2a\xfd\x78\xb3\x5a\x60\xc2\x08\x3b\xc6\x54\x13\xd1\xdb\x94\x2b\xaf\x47\x0d\x0a\x4b\x78\xe4\x3d\x6b\xa1\xf5\x60\xfe\x0d\x9a\x3e\x3c\x30\xe3\xea\x5b\x85\xd1\xf5\x30\xc7\x48\xa5\xd4\x6e\x68\x90\x83\x69\xed\x9d\xaf\xbd\x16\x6f\xdc\x33\xda\xfa\x00\x4c\xdc\xf6\x0f\xaf\xe5\x98\x46\x93\x2b\x96\x35\x16\x47\x2d\x79\xcf\xab\x33\xa6\x34\x82\x5c\x7d\xed\xc8\xd4\x8d\x2e\xca\x52\x34\x42\xad\x3f\x08\x85\x7d\x1f\x21\x5f\x3c\xbb\xba\xa5\xbe\xce\x9e\x60\x7e\xbb\xa9\x1d\x82\xc1\xfc\xf6\x1c\xde\x83\x29\x07\x33\xce\x3a\x09\x94\x46\x29\x43\x68\x4f\x31\x03\xa9\x9f\x10\xda\xd4\xc8\x87\x69\x77\x11\xb2\x0d\x31\xa3\x7a\x7e\xf8\xf0\x27\x1b\xa5\xf2\x18\x8b\x23\x36\x33\xc4\x6c\x60\x11\xfd\x48\x89\xf2\xe5\x02\x09\x1c\xd1\x91\x6c\xb8\x3e\x1a\xaf\x06\x52\xd2\xc1\x79\x3e\x6d\x6c\x37\xb9\xa6\xd2\x08\x63\x55\x4f\xe7\x76\xb9\x61\x0b\x1f\x5d\xba\xfd\x1e\x81\xe9\x6c\x15\x4c\x06\x2f\xbe\xf0\x44\x1b\xed\x43\xf0\x8c\x8d\x5a\x88\xff\x1c\x16\xc4\x53\x06\xe7\x56\xdb\x79\xd1\x59\x5e\xbb\xb3\xb7\x29\xd8\x57\x60\x92\x8b\xc1\xbe\x26\xf3\xe7\x5c\x2d\x9d\x45\x09\xc7\xc8\x20\x38\x2b\x01\x28\x47\xae\x7c\xe1\xe2\x7c\xe2\x14\x1c\xf2\x23\x4d\x81\xf5\x67\xe4\x1f\xab\x3a\x27\xab\x7c\x5b\xdf\xa5\xc9\x72\xbd\x2e\x96\xdb\x2c\xbf\x4b\x93\xec\x69\x59\x2e\xb3\x3a\x2f\xd5\x7a\xb7\xad\xea\x7c\xbd\x5e\xd6\xc5\x6e\xab\xe5\x72\xbf\x2b\xad\xf4\xb8\xcc\xae\xab\x62\xfb\x9c\x6f\xeb\x5d\xf9\x52\xbf\xec\x15\x47\x99\xaf\xcc\x87\x6a\xb7\x5e\x96\xd5\x4b\x55\xe7\x1b\x25\xd5\xd6\xf4\xcb\xae\xdc\x3c\xed\xd6\xf9\xcd\xf5\x36\x61\x4f\xbf\x2c\x7e\x61\xc8\x78\xf3\xf1\xb3\x3f\x40\xc2\xd1\x35\x31\xaa\x03\x8e\xff\xd3\xa8\xa2\xfa\xdd\xbc\x20\xa3\xfe\xfd\x5f\x00\x00\x00\xff\xff\x62\x9a\x36\x44\xcc\x0d\x00\x00")

func assetsSchemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaGql,
		"assets/schema.gql",
	)
}

func assetsSchemaGql() (*asset, error) {
	bytes, err := assetsSchemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema.gql", size: 3532, mode: os.FileMode(420), modTime: time.Unix(1495574420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema.gql": assetsSchemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema.gql": &bintree{assetsSchemaGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

