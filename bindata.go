// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\xb6\x13\x7f\x5f\xa0\xdf\xe1\x2a\xe0\x5f\xc9\x48\x4a\x39\x7d\xf8\x37\xb0\xad\x16\xed\xda\x0d\x19\xbc\xf5\x21\xe9\x8b\x21\xcd\x02\x8a\x3c\x59\x4c\x68\xd2\x21\x4f\x4e\xbc\xc0\xdf\x7d\x90\x2c\xd9\x92\x67\xaf\x05\xb6\xbd\xb1\x49\xdd\xdd\x8f\xbf\x7b\xe2\x71\xf4\xe8\xdd\x87\x1f\xce\x7e\xfb\xf8\x1e\x72\x9a\xea\x57\x0f\x1f\x8c\xea\x7f\x80\x51\x8e\x5c\x56\x2b\x80\x91\x56\xe6\x1a\x1c\xea\x24\xf0\xb4\xd0\xe8\x73\x44\x0a\x20\x77\x98\x25\x41\x4e\x34\xf3\x83\x38\x16\xd2\x5c\x79\x26\xb4\x2d\x64\xa6\xb9\x43\x26\xec\x34\xe6\x57\xfc\x2e\xd6\x2a\xf5\xf1\xc4\xf1\x59\xae\x6e\x74\xdc\x67\x2f\xd9\xf1\x7a\xcb\x84\xf7\x01\xc4\xcd\x41\x5e\x38\x35\x23\xf0\x4e\x7c\x37\x70\x86\x24\xf2\xf8\x88\xf5\x59\x7f\xb5\x66\x53\x65\xd8\x95\x0f\x5e\x8d\xe2\x15\xdc\x3f\x00\x77\xc8\x05\xc5\x47\x2f\xd8\x33\xf6\x74\xb5\xf9\x6f\xd1\x9f\x48\x3b\xfd\x37\x4f\xd8\x17\xf5\xbf\xc0\x8f\xe2\x75\xbe\x47\xa9\x95\x0b\xa8\x12\x9d\x04\xb7\x4a\x52\x3e\x80\xa3\x7e\xff\x7f\x43\xc8\x51\x4d\x72\x6a\x76\x53\xee\x26\xca\x0c\xa0\x3f\x04\x3b\x47\x97\x69\x7b\x3b\x80\x5c\x49\x89\x66\x18\x34\x9c\xa5\x9a\x83\x92\x49\xd0\x9c\x1c\x34\xc0\x2d\xac\x79\x3e\x0c\x5e\x8d\x2d\x97\xca\x4c\x18\x63\xa3\x58\xaa\x79\xd7\xe7\x7a\x07\x30\xe7\x0e\xb4\x9d\x4c\x50\x9e\x18\x48\x20\xe3\xda\xe3\xb0\x2d\x24\x7b\x8d\xa5\x24\x08\x86\x0f\x1f\xb4\x05\x53\x4e\x22\x87\x04\x6e\x95\x91\xf6\x96\x69\x2b\x38\x29\x6b\x58\xce\x7d\xce\x2a\x61\x14\x73\x21\xd0\xfb\xcb\x0a\x23\x89\xce\x7f\xff\xea\xbf\x3e\xbe\x38\xe8\xc5\xbd\x06\x48\x65\x10\x55\xba\x3d\xb8\x6f\xbe\x41\x9b\x10\xb9\x62\xc3\x07\xd6\x6c\x2a\x9b\xf3\xa3\x8b\xb5\x68\xb9\x21\x97\x15\x46\x94\x4c\x20\x2d\x94\x96\x6f\x0a\xca\xbf\x7c\x1e\x47\x9d\x03\x4a\xfe\x42\x2b\x34\x74\x22\x4b\xdf\x32\x89\xfd\x54\x1c\xcb\xe7\xf8\xf2\xff\xcf\x5f\xa6\x59\x9a\x61\x7a\xcc\x9f\xa5\x7d\x4c\x5f\x88\xe3\xf4\x69\x30\xec\xda\x3a\x94\xca\xa1\xa0\x2f\x9f\xc7\x3b\x22\x60\x9d\x9a\x28\xb3\x65\x22\xc4\x6c\xa5\xbd\xae\x34\x6d\x27\xca\x30\x9c\xa3\x35\x5a\x99\x55\xa1\x59\x5e\x50\x1e\x97\x3f\xd6\xa9\x3f\xf0\xb5\x43\x3f\xb3\xc6\xe3\x25\x2d\x66\x98\x54\xde\x3f\x76\xc8\xf5\x34\x79\x7f\x7a\xd2\x66\x55\xc3\x1f\x24\x10\x3c\x6e\xd8\x5d\x16\x4e\x25\x01\x1c\xb4\xe9\xee\x31\x59\x05\xe3\xb2\x2c\x2c\x38\x58\x87\x66\x8f\xb2\x17\x76\x86\x95\x62\x15\xe1\xd3\x72\x1b\xf5\x5a\xe5\x01\xe0\x90\x0a\x67\x6a\xab\x6f\x27\xa9\x86\xd8\x4e\x51\x75\x90\x87\x04\xce\x37\xdf\x01\x42\xf4\xea\x89\xbf\x56\x5a\x7b\xe6\x90\xcb\xcb\x7a\x3d\x3f\x0a\x0f\xbf\xad\x77\x53\x60\x81\xbb\x75\x0b\xa3\xe6\xe8\x3c\xd6\xda\xe4\x0a\x41\x85\xc3\x0a\x79\xa3\x7c\xb1\xcb\xd1\x15\x53\x76\x65\x95\x89\x42\x08\x7b\x7f\xeb\x72\xd5\xba\x9f\xc6\x3f\x96\x77\x2b\xba\xa8\xde\x7e\xe4\x8e\x4f\x7d\x27\x06\x1d\x09\x9b\x73\xa7\x78\xaa\xab\x80\xec\x93\xbc\x86\x9f\x4f\x3f\xfc\xca\x66\xdc\x79\x8c\xf6\x28\xf5\x60\x00\xa6\xd0\x7a\xab\x40\xcb\xeb\x0a\x5d\x09\x7e\xbf\x6c\x89\xca\x0e\x6d\xfa\xb1\x43\x0e\x1a\x8b\xf3\xe0\x4d\x5d\xaf\x55\xf9\x07\x17\x65\x91\xbf\x45\xee\xd0\x41\x59\x24\x55\xd5\xb6\x10\x97\x3b\xe2\x57\xcd\x99\x28\x88\x6f\x0a\x74\x8b\xe0\xb0\x7b\xce\x14\x29\xb7\x72\x00\xc1\xcc\x7a\x0a\x3a\x79\x2b\x6f\xd6\xc1\xca\x67\x4f\x4e\x99\x89\xca\x16\x5b\x01\xed\xe8\x0b\x87\x12\x0d\x29\xae\xfd\x00\x02\x65\x84\x2e\x24\x76\x21\x6b\xaf\x06\xcd\xa2\x25\x5c\xf6\x18\xe5\x68\xa2\x75\x26\xa3\xa6\x3f\xb7\x22\x53\x7b\xd5\x48\x19\xe1\x1d\x45\xbd\xe1\xf7\x20\xbd\xb5\x72\xb1\x85\x46\x6e\xd1\xfd\xb0\x3e\xa0\x95\xec\x8e\xfd\xb0\xad\xbd\x04\x51\x5d\xd5\x11\x3a\x67\x5d\x6f\x0f\x54\xdb\xbe\x6b\xde\x66\xbd\xab\xae\x3f\x97\x73\xf6\xdd\x87\x5f\x98\x43\x23\xd1\x45\x1b\xfd\x4a\xc2\x84\x43\x4e\xf8\x5e\xe3\x14\x0d\x45\x3f\x55\x73\xeb\xd3\xf8\x10\xee\xb3\x55\x03\x0c\xb6\x1a\x62\xd9\x4e\x99\xb4\xa2\x28\xed\xd8\x04\xa9\x86\x78\xbb\x38\x91\xd1\x66\xfe\xad\x67\x49\xfb\x06\xaa\xaf\x64\x8f\x74\xa6\xa6\x68\x0b\x5a\x47\xba\x7b\xcb\x94\xd5\xfd\x68\x4f\x79\x97\x4d\xc1\x21\xd9\x50\xe8\x3a\x12\xf2\xb0\x1b\x67\xce\x84\xe6\xde\x8f\x95\x27\xc6\xa5\x8c\x42\xb2\x56\xa7\xdc\x3d\x49\x0b\x22\x6b\xc2\x5e\x57\x59\x19\x83\xee\x0c\xef\x08\x12\x08\x9b\x0e\xc2\xb0\xdd\x1c\x2d\xf7\xab\xc6\x38\x45\x8d\x82\xac\x8b\x42\x7e\x4e\x8a\xca\xa9\xff\xd1\x21\x91\xca\x16\xf0\xa9\xea\x9c\x8b\xb0\xc7\x94\xf1\xe8\xe8\x8d\xbc\xe2\x02\x0d\x6d\xe8\x66\x84\x65\x86\xc2\x43\xe0\xdb\xc4\xad\x11\x5a\x89\xeb\xf2\x01\xb0\x33\x4c\xad\x90\x36\x53\x0e\x92\xad\xf9\xba\xb7\x68\xd6\x25\x73\x08\xfd\x3a\x06\x5b\x2f\xa5\xb2\x8b\xcb\xb7\x72\x5c\x3f\x96\xff\x0c\x00\x00\xff\xff\x5f\x67\x01\x98\x46\x0b\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2886, mode: os.FileMode(438), modTime: time.Unix(1495577606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xcd\x72\xdb\x36\x10\x3e\x13\x4f\x01\xdd\xd4\x99\x3c\x81\x6e\x0a\x4d\x2b\x9a\xca\x92\x42\x32\x4e\x5d\x8f\x0e\x30\xb9\x95\x30\x86\x00\x15\x04\xd3\xb0\x19\xbf\x7b\x07\x80\xf0\x47\xd1\x99\x4c\x2f\x16\x76\xb9\xfb\x61\xff\x17\xee\x9a\x13\x9c\x09\xfe\x81\xb2\xbf\x7b\x90\xc3\x02\x7f\xd6\x3f\xe8\x0d\x21\x35\x5c\xc0\x52\xf8\x07\xc2\xf8\x4e\x1c\xcf\x64\xa9\x94\xa4\x2f\xbd\x82\xb9\x3f\xad\xef\x16\x78\xcd\xd5\xec\xb7\xc5\x48\x64\x86\xb2\x94\xd1\x2d\xf0\x73\xca\xd9\x8a\x16\x0e\x28\xab\x87\x0b\xcc\xf5\x9f\x08\x4b\x93\x33\x94\xe5\x27\x22\x49\xa3\x40\xce\xfd\x29\x12\xf2\x3c\x2d\x29\xe4\x45\x48\xa2\xa8\xe0\xf3\xe8\x1c\x4b\x07\xee\x0c\x65\xd5\x2b\x65\xac\xfb\x39\xac\x95\x71\xc2\x9f\x7b\xe8\x61\x52\xe1\x39\x7c\x5f\x2b\x38\x1f\x50\xb6\x64\x8c\x12\xde\xc0\xdc\x1d\x22\x69\xc7\xd2\xb8\x40\x64\x73\x9a\xdb\x1f\xed\xb2\x8e\x51\xa0\x0e\xb3\x0f\xf8\x77\x18\xfe\x11\xb2\x5d\xe0\x4a\x49\xca\x8f\x1a\xc0\x0a\x94\xd0\xf5\x4c\x75\x33\x84\xf5\xa7\xbe\x51\xbd\xb4\xea\x8e\xb0\xd1\x8d\xbe\xce\xfd\x49\x5b\x73\xcf\x04\x31\xf6\x78\xae\x81\x12\x8c\xc8\x6a\xe8\x14\x9c\xe7\xf6\x27\xb2\x3c\xfa\x38\xf3\x25\x92\xa6\xd4\xd4\xca\xb8\x38\x50\x76\x07\x7f\x91\x9e\xa9\x47\xc2\x7a\xf0\xac\xae\x91\xf4\xa2\xd3\xe1\x9c\x43\xd9\x1d\xed\x2e\x8c\x0c\x5b\x72\x86\xc0\xfc\x44\x8f\xa7\x75\xb7\x12\xa2\x5d\xe0\x8f\x42\x30\x20\x1c\x65\xeb\xc6\x27\x17\x65\xa9\xfc\xbe\x7f\x61\xb4\x3b\x41\x2c\x5e\x29\xd2\xbc\x92\x17\x06\x11\xef\x0b\xa7\xca\x41\x4c\x7b\xa3\x43\xa8\x7b\xe3\xd6\xa1\xab\x27\x26\x88\xd1\xf7\x71\x13\x78\x5c\x9d\x4e\x8d\x14\x95\xf9\xd8\xec\xc9\x80\x4c\xf9\xb2\x92\xa2\xbf\x78\x90\x92\xb4\xb4\xef\xbc\x29\x8f\x82\xf5\xe7\x60\x59\x4e\x2e\xa4\xa1\x6a\xf0\x8c\xbd\x90\xfa\x86\x8a\xfe\xeb\x12\xf1\x40\xba\xa0\xbe\x92\xe4\x72\xa2\x4d\x48\xdc\x2f\xb5\xb0\xf3\x72\x2f\x3a\xaa\xd1\x4d\x15\xfc\xe1\x40\x31\x7e\x0a\xc7\x3f\xdd\xd1\xe9\xf8\x86\x32\x81\x4e\xdb\x05\x65\x4b\xde\x40\xa7\xe4\xe0\x19\x1f\xa9\x54\xa7\x96\x0c\x21\x44\x1f\x99\x10\x2d\xa3\x3c\x28\xdd\xf6\xff\x3b\xd1\x5d\x01\x6f\x41\x06\x3a\x4d\x48\x49\x22\x43\x2a\x68\x7a\x49\xd5\x50\x29\xa2\xa2\x70\x47\x57\x25\x13\x26\xb8\x12\x1a\xde\x0d\x9d\x9b\x09\x13\x0f\x98\x89\x69\xe2\x23\x15\xe0\x27\x63\x95\x17\xbb\x9f\xbb\x9b\xba\x97\x4b\x30\x58\x77\x44\x8d\xb9\x42\x7a\xa0\x7b\xd2\xa4\x20\x0f\x70\x7e\x01\x99\x8b\x9e\xab\xab\x48\x4d\xbe\x97\x06\xe3\x1a\x93\x9a\x36\xaf\x71\x54\xbf\x94\x9b\x08\xbf\xd8\x45\xfe\xfb\xfb\x12\xde\x44\xe8\x6e\xaa\xc5\x04\x49\x87\x21\xef\xa5\x04\xae\x0c\xbd\x81\x6f\xc0\x5c\xc2\x34\x23\xa4\x4f\x53\x17\x41\xb9\xea\xd6\xdc\x10\xce\xf8\xe1\x02\x76\xdd\xbc\x73\x47\xa7\x2f\x71\x89\x7b\x4e\xbf\xe9\xe5\x25\x14\x61\xd5\x3e\x9d\x22\x69\x06\x35\xc0\x3d\xe5\xb4\x3b\xa5\xa1\xb6\x3c\x68\x63\xab\xcd\xb9\xe0\xad\x43\xb4\x8c\x4a\x11\xa9\x3c\xcb\x00\xbb\x56\x9b\xf6\x56\xcb\xa7\x97\xd5\x92\x50\x4e\xf9\x31\x85\x9a\xf0\xde\x85\x5c\x5b\x3d\x1a\x50\x44\xc1\xbd\xe8\x79\x0b\x6d\x60\x16\xdf\xa1\xe9\xe3\x82\x19\x67\xdf\x09\x8c\xda\xc3\x96\x91\x0e\xa9\xbb\xd0\x72\x0e\x76\xb4\x77\x21\xf7\x86\xbc\x31\xcf\x4a\x9b\x02\x98\xe8\xf6\x77\xdb\x72\x0c\x63\xc0\x35\xca\x86\xc8\xa3\xa1\x82\xe5\xd5\x99\x30\x96\xb0\x7c\x7e\xdd\xca\x34\x83\x2e\x89\x52\xb2\x42\x9d\x3d\x18\xc7\x73\x1f\xe3\x90\x3c\x77\xba\x85\xbe\xee\x9e\x68\x7f\xfb\xad\x1d\x33\xa3\xfd\x1d\x30\x82\x05\x53\x06\xe6\x82\x77\x0a\x18\x4b\x42\x86\xf1\x9e\x11\x0e\xca\x3c\x21\x8c\xaa\xa5\x0f\xd3\xe6\x62\xec\x06\x62\xce\xcc\xfe\x08\xee\x4f\x0e\x4a\x6d\x31\x91\x47\x62\x77\x88\xbd\xc0\x71\xcc\x23\x25\x89\x97\x77\x24\x32\xc4\x78\xf2\x20\x4c\x69\x3c\x5b\x96\xa6\x0e\xde\xf2\x69\x65\x77\xc9\x35\x94\x96\x18\x8b\x06\x38\x7f\xcb\x0d\x5a\xfc\xe8\x32\xe3\xf7\x08\xdc\x44\x6b\xcd\x55\xf4\xe2\x8b\x2b\xda\x4a\x1f\xa2\x67\x6c\x32\x42\xc2\xe7\x38\x21\x01\x32\xaa\x5b\xa3\x17\x48\xaf\x79\x9d\xce\x41\x67\xcd\xbf\x01\x57\x42\x0e\xee\x35\x59\x3c\x16\xfa\xe8\x35\x4a\x38\x26\x0a\x51\xad\x98\xcc\x04\xd2\xab\xe8\x4c\x26\x3a\x5f\x85\x3c\x9f\x04\x03\xcf\x79\x43\x08\x78\x7f\xc6\xe1\xe9\x6a\x22\xb4\x2a\xb6\xf5\x07\x94\x2d\x37\x9b\xf5\x72\x9b\x17\x1f\x50\x96\x7f\x5a\x96\xcb\xbc\x2e\x4a\x7d\xde\x6d\xab\xba\xd8\x6c\x96\xf5\x7a\xb7\x35\x74\xb9\xdf\x95\x8e\xba\x5f\xe6\xd7\xd3\x7a\xfb\x58\x6c\xeb\x5d\xf9\x54\x3f\xed\x35\x46\x59\xac\xec\x87\x6a\xb7\x59\x96\xd5\x53\x55\x17\x0f\x9a\xaa\x9d\xea\xd7\x5d\xf9\xf0\x69\xb7\x29\x6e\x9a\xdd\x7a\x34\xfd\xce\xf8\x85\x95\x13\xd4\xc7\xff\x04\x44\x9c\x78\x91\x4d\x2c\xee\x08\xe3\xff\x8c\xad\x24\x9b\x37\xef\xc9\x89\x69\x7e\x93\x4f\xdb\x07\xa3\xe9\x64\xe9\xe4\x81\x8f\xde\xd0\x7f\x01\x00\x00\xff\xff\x8e\x28\xcb\xfa\x1c\x0e\x00\x00")

func assetsSchemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaGql,
		"assets/schema.gql",
	)
}

func assetsSchemaGql() (*asset, error) {
	bytes, err := assetsSchemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema.gql", size: 3612, mode: os.FileMode(438), modTime: time.Unix(1495587879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema.gql": assetsSchemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema.gql": &bintree{assetsSchemaGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

