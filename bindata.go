// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/schema.gql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\xec\x02\xfd\x0f\x57\x01\xab\x64\x24\xa5\x9c\xbe\xac\x81\x6d\xa5\x68\xd7\x6e\xc8\x90\xad\x2f\x69\x3f\x0c\x69\x16\x50\xe4\xc9\x62\x42\x93\x2e\x49\x39\xf5\x0a\xff\xf7\x81\xd4\x4b\x24\xb7\x29\x86\x61\xcb\x87\x98\xe4\xdd\x3d\x7c\x78\xf7\x90\xa7\xf9\xbd\x97\xaf\x7f\x7a\xff\xc7\x9b\x57\x50\xba\xa5\x3c\xba\x7b\x67\xde\xfc\x8e\xe6\x25\x52\xee\x07\xa3\xb9\x14\xea\x0a\x0c\xca\x2c\xb2\x6e\x23\xd1\x96\x88\x2e\x82\xd2\x60\x91\x45\xa5\x73\x2b\x3b\x4d\x53\xc6\xd5\xa5\x25\x4c\xea\x8a\x17\x92\x1a\x24\x4c\x2f\x53\x7a\x49\x3f\xa7\x52\xe4\x36\x5d\x18\xba\x2a\xc5\x27\x99\x4e\xc8\x53\x72\xd8\x4d\x09\xb3\x36\x82\xb4\xde\xc6\x32\x23\x56\x0e\xac\x61\xff\x18\xb6\x40\xc7\xca\xf4\x80\x4c\xc8\xa4\x1e\x93\xa5\x50\xe4\xd2\x46\x47\xf3\xb4\x86\xfb\xd7\xd0\x06\x29\x73\xe9\xc1\x13\xf2\x88\x3c\xac\x27\xff\x27\xf6\x03\xae\x97\xff\x1d\xfe\x6d\xd9\xde\x05\x9f\xa7\x6d\x91\xe7\xb9\xe6\x1b\x08\xe5\xcd\xa2\x6b\xc1\x5d\x39\x85\x83\xc9\xe4\x87\x19\x94\x28\x16\xa5\x6b\x67\x4b\x6a\x16\x42\x4d\x61\x32\x03\xbd\x46\x53\x48\x7d\x3d\x85\x52\x70\x8e\x6a\x16\xd5\x7c\xb9\x58\x83\xe0\x59\xd4\xee\x1a\xb5\xb0\x3d\xa4\x75\x39\x8b\x8e\x4e\x34\xe5\x42\x2d\x08\x21\xf3\x94\x8b\x75\xff\xb4\x47\x77\xef\x40\xf8\x5b\x53\x03\x52\x2f\x16\xc8\x8f\x15\x64\x50\x50\x69\x71\xd6\x37\x3a\x7d\x85\xde\x12\x45\xb3\xbb\x77\xfa\x86\x25\x75\xac\x84\x0c\xae\x85\xe2\xfa\x9a\x48\xcd\xa8\x13\x5a\x91\x92\xda\x92\x04\x63\x92\x52\xc6\xd0\xda\x8b\x80\x91\x25\x67\x7f\x7e\xb4\x1f\xef\x9f\xef\x8d\xd3\x71\x0b\x24\x0a\x48\x82\xef\x18\xbe\xb4\x6b\xd0\x27\xe4\x4c\x75\xc3\x07\x3a\x36\x21\xe6\xec\xe0\xbc\x33\x6d\x6f\xc8\x15\x95\x62\x9e\x09\xe4\x95\x90\xfc\x79\xe5\xca\x0f\xef\x4e\x92\xc1\x06\x9e\x3f\x93\x02\x95\x3b\xe6\xfe\x6c\x05\xc7\x49\xce\x0e\xf9\x63\x7c\xfa\xe3\xe3\xa7\x79\x91\x17\x98\x1f\xd2\x47\xf9\x04\xf3\x27\xec\x30\x7f\x18\xcd\x86\xb1\x06\xb9\x30\xc8\xdc\x87\x77\x27\xdf\xc8\x80\x36\x62\x21\xd4\x4e\x08\x63\xab\xda\xbb\xd3\x98\xd4\x0b\xa1\x08\xae\x51\x2b\x29\x54\x2d\x31\x4d\x2b\x57\xa6\xfe\x9f\x36\xe2\x2f\x7c\x66\xd0\xae\xb4\xb2\x78\xe1\x36\x2b\xcc\xc2\xe9\xef\x1b\xa4\x72\x99\xbd\x3a\x3d\xee\xb3\x6a\xe0\xf7\x32\x88\xee\xb7\xec\x2e\x2a\x23\xb2\x08\xf6\xfa\x74\x6f\x09\xa9\x93\x71\xe1\x65\x05\x7b\x5d\x6a\x66\x5e\x31\xa3\x51\xdf\xd1\x32\xbd\xc2\xe0\x14\xb2\x7b\xea\xa7\xc9\xb8\x27\x0d\x00\x83\xae\x32\xaa\x81\x1f\x16\x68\x34\x1a\x0d\xab\xd3\xc4\xfb\xda\xf8\x9d\x7c\xa2\xc2\x0e\x16\x32\x38\xab\xd7\x46\x31\x5a\xf1\xc0\x5e\x09\x29\x2d\x31\x48\xf9\x45\x33\x5e\x1f\xc4\xfb\xdf\x75\xf9\x54\x61\x85\x3d\xb7\xf3\x59\xc3\x61\xd4\x50\xac\xb7\x22\x97\x5a\xa8\x24\x86\x78\x3c\x83\x60\xfe\x8a\x6a\xb8\x69\x6f\x4f\x7e\xf6\x0f\x20\x9a\xa4\x99\xbe\xa1\x86\x2e\x6d\xc7\x7d\xb0\x4a\xd6\xd4\x08\x9a\xcb\x70\x90\xdb\x2c\xcf\xe0\xd7\xd3\xd7\xbf\x93\x15\x35\x16\x93\x5b\x9c\xc6\x30\x05\x55\x49\xb9\xa3\x26\xff\xac\xa0\xf1\xe0\x5f\xb6\x3d\x93\xbf\x4e\xed\xe5\x19\x08\x1e\xda\x88\xb3\xe8\x79\x23\xae\xa0\xd5\xe8\xdc\x2b\xf2\x05\x52\x83\x06\x7c\x55\x83\xc4\x7a\x88\xdb\x9d\x94\x85\x26\x90\x44\xe9\xa7\x0a\xcd\x26\xda\x6f\x0f\x3f\x5a\xa2\x2b\x35\x9f\x42\xb4\xd2\xd6\x45\x6d\x5d\xfc\xa3\x37\xad\x4f\x69\x9d\x11\x6a\x21\x8a\xcd\x4e\xfa\x5a\x57\x66\x90\xa3\x72\x82\x4a\x3b\x85\x48\x28\x26\x2b\x8e\x1d\x50\xc3\x7e\xda\x1e\xa3\x59\xdf\x8e\x89\x2b\x51\x25\x5d\xa5\x92\xf6\xc2\x74\x65\x69\x89\xb7\x06\xe2\xf0\xb3\x0b\x8a\xfd\x3e\xc0\x0b\xcd\x37\x37\x20\xce\x6c\xba\x71\x8b\xd8\x2b\xde\x20\xa8\x81\x1e\x6d\x81\x85\x27\x32\x41\x63\xb4\x19\x7f\x15\xdf\x0f\xea\x62\x5a\x5a\xb3\x81\x12\xdf\xf9\x16\xf6\xf2\xf5\x6f\xc4\xa0\xe2\x68\x92\xda\x2b\xac\x12\x66\x90\x3a\x7c\x25\x71\x89\xca\x25\xbf\x84\xa6\xf0\xf6\x64\x1f\xbe\x14\xb5\x5c\xa7\x3b\xf2\xdd\xb6\x29\xe7\x9a\x55\x3e\x86\x2c\xd0\x35\xe1\x2f\x36\xc7\x3c\xb9\x69\x2c\xe3\xe0\xd8\xbf\xdd\xcd\x53\x67\xd1\xbd\x17\x4b\xd4\x95\xeb\x32\x37\x7c\x60\xbd\x10\xef\xdd\xa2\x44\xaf\x5f\x0a\x19\x74\xfb\x0f\x4f\x10\xd3\x78\x3c\xeb\xfb\x53\xc2\x24\xb5\xf6\x44\x58\x47\x28\xe7\x49\xec\xb4\x96\x39\x35\x0f\xf2\xca\x39\xad\xe2\xf1\xd0\x59\x28\x85\xe6\x3d\x7e\x76\x90\x41\xdc\x8a\x1d\xe3\xfe\x0b\x05\x37\x7b\x07\x1d\x9f\xa2\x44\xe6\xb4\x49\x62\x7a\xe6\x84\xf3\xbd\xf4\x8d\x41\xe7\x44\xb1\x81\xb7\x41\xe8\xe7\xf1\x98\x08\x65\xd1\xb8\xe7\xfc\x92\x32\x54\xee\x86\x6e\xe1\xd0\x97\x25\xde\x07\xba\x4b\x5c\x2b\x26\x05\xbb\xf2\x8d\xf5\x9b\x69\xea\xa5\xb4\xed\x1e\x90\xed\xf4\xad\x01\xe4\x76\x70\x33\x9b\xc1\x3e\x4c\x42\xa5\x86\x5f\x1e\xfe\xee\xf9\xef\xcd\x34\x7c\x70\xfe\x1d\x00\x00\xff\xff\xfd\x12\xe5\xa4\x88\x0a\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2696, mode: os.FileMode(438), modTime: time.Unix(1495217029, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x51\x8f\xa3\x36\x10\x7e\x4e\xa4\xfc\x07\xf6\x2d\x95\xee\x17\xe4\x2d\xcb\x92\x2c\x6a\x36\xc9\x01\xb7\xa7\x55\x94\x07\x2f\x4c\x83\xb5\xc6\xa6\xc6\x5c\x8f\x56\xfd\xef\x95\xed\x80\xc7\x84\xb4\xab\xbe\x24\xf6\xc7\xcc\x37\xcc\x37\x33\x36\x4d\x5e\x42\x45\x82\xbf\x16\xf3\xd9\xef\x2d\xc8\x6e\x15\x7c\xd5\x7f\x8b\xf9\xdf\x8b\xf9\x62\xae\xba\x1a\x2c\xa0\x2d\x82\xe0\x49\x5c\x2a\xb2\x56\x4a\xd2\xf7\x56\xc1\x72\x58\xc5\x4f\xab\x20\xe6\xea\xe1\x97\xd5\xc8\xe4\x61\x31\x9f\xf9\x48\xb3\x0a\x4e\x3e\xb2\x17\x05\x9c\x17\xf3\x59\xd6\xd5\xb0\xd4\x3f\x88\x4d\x6f\x35\x47\x58\x12\x49\x72\x05\x72\x39\xac\x90\xd5\x80\x19\x53\x21\x6b\x21\x89\xa2\x82\x2f\xd1\x1a\x9b\x3b\x54\x3b\xa4\x1f\x94\xb1\xe6\xdf\x89\xad\xcd\x60\xfd\xb5\x85\x16\x26\x3d\x4e\xee\x79\xac\xa0\xd2\x79\xad\x19\xa3\x84\xe7\xb0\xec\x17\xc8\xbc\x87\x0c\x33\x10\x99\x97\x4b\xfb\xa7\x13\xd7\x52\xb9\xdd\xf9\xe1\x4b\xf0\x2b\x74\x7f\x08\x59\xac\x82\x54\x49\xca\x2f\x9a\xc1\x1a\x24\xd0\xb4\x4c\xe9\x17\x74\x75\xf3\x55\xb6\x05\x1c\x57\x4c\x97\x07\x7e\x23\x2d\x53\xaf\x84\xb5\xe0\xb0\x26\x97\xb4\xd6\x0a\xf5\xb1\x34\x4a\x9b\x9a\x91\x6e\x4f\x2a\x40\xe8\x33\xbd\x94\x71\xb3\x15\xa2\x58\x05\x8f\x42\x30\x20\x7c\x31\x9f\xc5\xf9\x20\xf9\x62\x3e\x1b\xb9\x1c\xdb\x77\x46\x9b\x12\x3c\x8f\x54\x91\xfc\x83\xbc\x33\xc0\xe0\x37\x4e\xd5\x40\x73\x2f\x35\xdd\x40\xa6\x83\x27\xb2\xbb\xa6\xb5\x61\x82\x28\x6c\x31\x6e\x54\xcc\xae\xd5\x36\x7c\xa8\x19\x6f\x93\x98\xd6\x68\x32\xb5\xad\x14\x6d\xed\x88\x12\x52\xd0\xb6\x71\x2f\xf5\x2a\x58\x5b\xa1\x97\x0c\x49\x4d\x72\xaa\x3a\x87\x1c\x85\xd4\x71\x52\xfa\xe7\x50\xa2\x17\xd2\x20\x8a\xad\x24\x75\x49\x73\x54\xd5\xcf\x0d\x9d\x4b\x7a\x68\x66\xab\xa4\xdf\xaa\x1a\xe1\x39\x34\x4a\x76\x0e\x79\xa4\x52\x95\x05\xe9\x50\xf6\x8f\x4c\x88\x82\x51\x8e\xfc\x6e\x47\xf0\xae\x76\x5b\xe0\x05\x48\x04\x8c\x14\x4f\x08\x7e\xa1\x14\xf2\x56\x52\xd5\xa5\x8a\x28\xac\x26\x0a\xe8\x8d\x3a\xca\xca\xcd\xdd\x30\xfe\x37\xb3\xee\x8d\xfa\xd4\x5c\x23\xe9\x5c\x90\x3b\xe2\x85\xd1\xe1\xbf\x92\x1f\xe5\x1a\x4a\x30\x84\x4f\x44\xdd\xc0\x42\x3a\xb2\x0d\xc9\x47\x44\x2f\x50\xbd\x83\x0c\x45\xcb\x55\x6f\x94\x91\x9f\x89\xe1\xe9\x35\xca\x68\xfe\xe1\x29\xfd\x2d\xd9\xe1\x28\xd1\x01\xe9\xe1\xc2\xfa\xe0\x94\x9a\x13\xfd\x64\x84\x33\xba\x84\xad\x94\xc0\x95\x01\x76\xf0\x03\xd8\x50\x4a\x8d\xa0\xca\xea\x6d\x2d\x28\x57\x4d\xcc\xcd\x66\x48\xa4\xab\xc1\x5e\x0a\xf7\x43\x35\x26\x56\x5f\xd5\x93\xff\xd0\xdc\x33\x42\x11\x96\x1e\x6f\x0e\x15\xbf\xc2\x86\x65\x43\x39\x6d\xca\x51\x0d\x2c\x08\x85\x97\x82\xd9\x44\xbc\x18\x78\x2d\x92\x2a\x22\x95\xc3\x0c\xfb\x51\x34\xd4\xd6\x6c\x3a\x7b\xed\x32\x0a\x99\x49\x42\x39\xe5\x97\x11\xdd\xb4\x1c\x7d\x35\x4c\x06\xe3\x43\x8b\x28\xd8\x88\x96\x17\x50\x20\x34\xfa\x09\x79\xeb\xb5\xd5\x4d\x83\xf4\x26\xe3\x91\xb2\xdd\xa6\x85\xee\xc3\x5a\xe4\x7c\xbd\x03\x1a\xd7\x1d\x66\x3b\xf5\xa2\xd6\xc3\xb6\xc8\xd4\x69\x71\x7f\xa2\x6f\xb9\x4c\x10\x43\xb5\x23\xf2\x62\xb6\x28\x8b\xb4\x22\x8c\xf9\x18\xaa\x3f\xbe\x49\xed\x20\x5f\x40\x0f\xd1\x29\xe6\xea\xec\x35\xfc\x90\xac\xb5\x3e\xe3\x2f\x14\xdc\x73\xe8\xb1\xe0\x8d\x02\xc6\xae\x59\xf4\x94\x5e\x6a\x27\xb4\x73\x9e\xc3\x84\xf7\x3e\x31\xff\x01\x5c\x09\xd9\xd9\xf2\x9f\xa2\xd7\x48\xaf\x9c\x47\x02\x17\xcf\x21\x15\x8c\xc8\xb4\x6b\x14\x54\x08\x54\xa3\x57\xf9\x2e\x64\x55\x0a\x7d\xfd\x5e\x11\xa3\x0c\xf0\xb6\x0a\xdc\x47\x88\x95\x65\x1b\xed\xb3\x2f\x7a\xb1\xdb\xc5\xeb\x7d\x18\xe9\x75\xf8\xbc\x4e\xd6\x61\x16\x25\x66\x73\xd8\xa7\x59\xb4\xdb\xad\xb3\xf8\xb0\xb7\x40\x72\x3c\x24\xc3\x76\xb3\x0e\xfb\x65\xbc\x7f\x8d\xf6\xd9\x21\x79\xcb\xde\x8e\x86\x28\x89\xb6\xd7\x47\xe9\x61\xb7\x4e\xd2\xb7\x34\x8b\x5e\xcc\x36\x1b\xfc\xbf\x1f\x92\x97\xe7\xc3\x2e\x9a\xea\x00\xab\xc3\xbd\x5b\xec\x73\x67\x16\xe2\x18\x7f\xe4\xf9\xa5\x46\xe7\xe1\xe4\x7d\x80\x89\xfe\x6f\x6b\x7b\xf5\x9d\xf8\x2e\xf1\x4e\x81\x7f\x02\x00\x00\xff\xff\x58\xdd\xb8\xa5\xd0\x0b\x00\x00")

func assetsSchemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaGql,
		"assets/schema.gql",
	)
}

func assetsSchemaGql() (*asset, error) {
	bytes, err := assetsSchemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema.gql", size: 3024, mode: os.FileMode(438), modTime: time.Unix(1495393119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/schema.gql": assetsSchemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"schema.gql": &bintree{assetsSchemaGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

